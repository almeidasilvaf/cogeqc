[{"path":"/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with cogeqc","title":"Getting help with cogeqc","text":"Thanks using cogeqc! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with cogeqc","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with cogeqc","text":"Armed reprex, next step figure ask. See also Bioconductor help website. ’s question: start community.rstudio.com, /StackOverflow. Bioconductor-related question, please ask Bioconductor Support Website using appropriate package tag (website send automatic email package authors). people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with cogeqc","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"/articles/vignette_01_assessing_genome_assembly.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Assessing genome assembly and annotation quality","text":"working genome project using publicly available genomes comparative analyses, critical assess quality data. past years, several tools developed several metrics proposed assess quality genome assembly annotation. cogeqc helps users interpret genome assembly statistics comparing statistics publicly available genomes NCBI. Additionally, cogeqc also provides interface BUSCO (Simão et al. 2015), popular tool assess gene space completeness. Graphical functions available make publication-ready plots summarize results quality control.","code":""},{"path":"/articles/vignette_01_assessing_genome_assembly.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Assessing genome assembly and annotation quality","text":"can install cogeqc Bioconductor following code:","code":"if(!requireNamespace('BiocManager', quietly = TRUE))   install.packages('BiocManager') BiocManager::install(\"cogeqc\") # Load package after installation library(cogeqc)"},{"path":"/articles/vignette_01_assessing_genome_assembly.html","id":"assessing-genome-assembly-quality-statistics-in-a-context","dir":"Articles","previous_headings":"","what":"Assessing genome assembly quality: statistics in a context","title":"Assessing genome assembly and annotation quality","text":"analyzing interpreting genome assembly statistics, often useful place stats context comparing stats genomes closely-related even species. cogeqc provides users interface NCBI Datasets API, can used retrieve summary stats genomes NCBI. section, guide retrieve information use reference interpret data.","code":""},{"path":"/articles/vignette_01_assessing_genome_assembly.html","id":"obtaining-assembly-statistics-for-ncbi-genomes","dir":"Articles","previous_headings":"Assessing genome assembly quality: statistics in a context","what":"Obtaining assembly statistics for NCBI genomes","title":"Assessing genome assembly and annotation quality","text":"obtain data frame summary statistics NCBI genomes particular taxon, use function get_genome_stats(). taxon parameter, must specify taxon data extracted. can done either passing character scalar taxon name passing numeric scalar NCBI Taxonomy ID. example, code demonstrates two ways extracting stats maize (Zea mays) genomes NCBI: can see, 94 maize genomes NCBI. can also include filters searches passing list key-value pairs keys list names values elements. instance, obtain chromosome-scale annotated maize genomes, run: full list filtering parameters possible arguments, see API documentation.","code":"# Example 1: get stats for all maize genomes using taxon name maize_stats <- get_genome_stats(taxon = \"Zea mays\") head(maize_stats) #>         accession  source species_taxid         species_name #> 1 GCA_000005005.6 GENBANK          4577             Zea mays #> 2 GCA_000223545.1 GENBANK          4577             Zea mays #> 3 GCA_000275765.1 GENBANK          4577             Zea mays #> 4 GCA_001644905.2 GENBANK        381124 Zea mays subsp. mays #> 5 GCA_001984235.2 GENBANK        381124 Zea mays subsp. mays #> 6 GCA_001990705.1 GENBANK        381124 Zea mays subsp. mays #>   species_common_name species_ecotype species_strain species_isolate #> 1               maize            <NA>             NA            <NA> #> 2               maize            <NA>             NA            <NA> #> 3               maize            <NA>             NA            <NA> #> 4               maize            <NA>             NA            <NA> #> 5               maize            <NA>             NA            <NA> #> 6               maize            <NA>             NA            <NA> #>               species_cultivar assembly_level assembly_status #> 1                          B73     Chromosome         current #> 2 Palomero Toluqueno EDMX-2231       Scaffold         current #> 3                          B73         Contig         current #> 4                          W22     Chromosome         current #> 5                          EP1     Chromosome         current #> 6                           F7     Chromosome         current #>                 assembly_name assembly_type submission_date #> 1               B73 RefGen_v4       haploid      2017-02-07 #> 2     ZeaMays_PT_EDMX2233_1.0       haploid      2011-08-16 #> 3            ZmaysB73_wgs_1.0       haploid      2012-07-03 #> 4 Zm-W22-REFERENCE-NRGENE-2.0       haploid      2017-02-02 #> 5    Zm-EP1-REFERENCE-TUM-1.0       haploid      2017-02-09 #> 6     Zm-F7-REFERENCE-TUM-1.0       haploid      2017-02-09 #>                                                                              submitter #> 1                                                                        maizesequence #> 2 Laboratorio Nacional de Genómica para la Biodiversidad (LANGEBIO) CINVESTAV Irapuato #> 3                                                                        maizesequence #> 4                                                            W22 Sequencing Consortium #> 5                                       Technical University of Munich, Plant Breeding #> 6                                       Technical University of Munich, Plant Breeding #>            sequencing_technology atypical refseq_category chromosome_count #> 1                         PacBio    FALSE            <NA>               10 #> 2 454 GS20; 454 Titanium; Sanger     TRUE            <NA>               NA #> 3                     454 GS FLX     TRUE            <NA>               NA #> 4   Illumina HiSeq; 10x Genomics    FALSE            <NA>               10 #> 5                       Illumina    FALSE            <NA>               10 #> 6                       Illumina    FALSE            <NA>               10 #>   sequence_length ungapped_length contig_count contig_N50 contig_L50 #> 1      2134373047      2103640169         2787    1279870        506 #> 2       177051422       177051324       196705       1129      44576 #> 3         1335069         1335069         1844        949        434 #> 4      2133880228      2093255169        68134      72426       8765 #> 5      2455259639      2429778437       130125      82504       8782 #> 6      2392801755      2367184004       117311      96966       7318 #>   scaffold_count scaffold_N50 scaffold_L50 GC_percent annotation_provider #> 1            596     10679170           62       46.5       maizesequence #> 2         196697         1129        44576       45.5                <NA> #> 3             NA           NA           NA       45.0                <NA> #> 4            191    222590201            5       46.5                <NA> #> 5          60567    249966684            5       46.5                <NA> #> 6          62610    237276974            5       46.5                <NA> #>   annotation_release_date gene_count_total gene_count_coding #> 1              2017-02-07            39320             39320 #> 2                    <NA>               NA                NA #> 3                    <NA>               NA                NA #> 4                    <NA>               NA                NA #> 5                    <NA>               NA                NA #> 6                    <NA>               NA                NA #>   gene_count_noncoding gene_count_pseudogene gene_count_other CC_ratio #> 1                   NA                    NA               NA    278.7 #> 2                   NA                    NA               NA       NA #> 3                   NA                    NA               NA       NA #> 4                   NA                    NA               NA   6813.4 #> 5                   NA                    NA               NA  13012.5 #> 6                   NA                    NA               NA  11731.1 str(maize_stats) #> 'data.frame':    94 obs. of  36 variables: #>  $ accession              : chr  \"GCA_000005005.6\" \"GCA_000223545.1\" \"GCA_000275765.1\" \"GCA_001644905.2\" ... #>  $ source                 : chr  \"GENBANK\" \"GENBANK\" \"GENBANK\" \"GENBANK\" ... #>  $ species_taxid          : int  4577 4577 4577 381124 381124 381124 381124 381124 4579 381124 ... #>  $ species_name           : chr  \"Zea mays\" \"Zea mays\" \"Zea mays\" \"Zea mays subsp. mays\" ... #>  $ species_common_name    : chr  \"maize\" \"maize\" \"maize\" \"maize\" ... #>  $ species_ecotype        : chr  NA NA NA NA ... #>  $ species_strain         : logi  NA NA NA NA NA NA ... #>  $ species_isolate        : chr  NA NA NA NA ... #>  $ species_cultivar       : chr  \"B73\" \"Palomero Toluqueno EDMX-2231\" \"B73\" \"W22\" ... #>  $ assembly_level         : Factor w/ 4 levels \"Complete\",\"Chromosome\",..: 2 3 4 2 2 2 2 2 3 3 ... #>  $ assembly_status        : chr  \"current\" \"current\" \"current\" \"current\" ... #>  $ assembly_name          : chr  \"B73 RefGen_v4\" \"ZeaMays_PT_EDMX2233_1.0\" \"ZmaysB73_wgs_1.0\" \"Zm-W22-REFERENCE-NRGENE-2.0\" ... #>  $ assembly_type          : chr  \"haploid\" \"haploid\" \"haploid\" \"haploid\" ... #>  $ submission_date        : chr  \"2017-02-07\" \"2011-08-16\" \"2012-07-03\" \"2017-02-02\" ... #>  $ submitter              : chr  \"maizesequence\" \"Laboratorio Nacional de Genómica para la Biodiversidad (LANGEBIO) CINVESTAV Irapuato\" \"maizesequence\" \"W22 Sequencing Consortium\" ... #>  $ sequencing_technology  : chr  \"PacBio\" \"454 GS20; 454 Titanium; Sanger\" \"454 GS FLX\" \"Illumina HiSeq; 10x Genomics\" ... #>  $ atypical               : logi  FALSE TRUE TRUE FALSE FALSE FALSE ... #>  $ refseq_category        : chr  NA NA NA NA ... #>  $ chromosome_count       : int  10 NA NA 10 10 10 10 10 NA NA ... #>  $ sequence_length        : num  2.13e+09 1.77e+08 1.34e+06 2.13e+09 2.46e+09 ... #>  $ ungapped_length        : num  2.10e+09 1.77e+08 1.34e+06 2.09e+09 2.43e+09 ... #>  $ contig_count           : int  2787 196705 1844 68134 130125 117311 405730 182074 140894 102656 ... #>  $ contig_N50             : int  1279870 1129 949 72426 82504 96966 10873 39757 31764 71122 ... #>  $ contig_L50             : int  506 44576 434 8765 8782 7318 42688 16302 7912 8373 ... #>  $ scaffold_count         : int  596 196697 NA 191 60567 62610 43299 3538 107418 48268 ... #>  $ scaffold_N50           : int  10679170 1129 NA 222590201 249966684 237276974 215148664 2707071 107689 2995073 ... #>  $ scaffold_L50           : int  62 44576 NA 5 5 5 5 233 499 168 ... #>  $ GC_percent             : num  46.5 45.5 45 46.5 46.5 46.5 46 46.5 45.5 46 ... #>  $ annotation_provider    : chr  \"maizesequence\" NA NA NA ... #>  $ annotation_release_date: chr  \"2017-02-07\" NA NA NA ... #>  $ gene_count_total       : int  39320 NA NA NA NA NA NA NA NA NA ... #>  $ gene_count_coding      : int  39320 NA NA NA NA NA NA NA NA NA ... #>  $ gene_count_noncoding   : int  NA NA NA NA NA NA NA NA NA NA ... #>  $ gene_count_pseudogene  : int  NA NA NA NA NA NA NA NA NA NA ... #>  $ gene_count_other       : int  NA NA NA NA NA NA NA NA NA NA ... #>  $ CC_ratio               : num  279 NA NA 6813 13012 ...  # Example 2: get stats for all maize genomes using NCBI Taxonomy ID maize_stats2 <- get_genome_stats(taxon = 4577)  # Checking if objects are the same identical(maize_stats, maize_stats2) #> [1] TRUE # Get chromosome-scale maize genomes with annotation ## Create list of filters filt <- list(     filters.has_annotation = \"true\",     filters.assembly_level = \"chromosome\" ) filt #> $filters.has_annotation #> [1] \"true\" #>  #> $filters.assembly_level #> [1] \"chromosome\"  ## Obtain data filtered_maize_genomes <- get_genome_stats(taxon = \"Zea mays\", filters = filt) dim(filtered_maize_genomes) #> [1]  4 36"},{"path":"/articles/vignette_01_assessing_genome_assembly.html","id":"comparing-custom-stats-with-ncbi-stats","dir":"Articles","previous_headings":"Assessing genome assembly quality: statistics in a context","what":"Comparing custom stats with NCBI stats","title":"Assessing genome assembly and annotation quality","text":"Now, suppose sequenced genome, obtained assembly annotation stats, want compare NCBI genomes identify potential issues. Examples situations may encounter include: genome assembled huge think might problem assembly. gene annotation pipeline predicted n genes, sure number reasonable compared assemblies species closely-related species. compare user-defined summary stats NCBI stats, use function compare_genome_stats(). function include values observed statistic distribution (based NCBI stats) return percentile rank observed values distribution. example, let’s go back maize stats obtained previous section. Suppose sequenced new maize genome observed following values: Genome size = 2.4 Gb Number genes = 50,000 CC ratio = 2 1 compare observed values publicly available maize genomes, need store data frame. column accession mandatory, column matched columns data frame obtained get_genome_stats(). Thus, make sure column names data frame match column names reference data frame. , can compare data frames :","code":"# Check column names in the data frame of stats for maize genomes on the NCBI names(maize_stats) #>  [1] \"accession\"               \"source\"                  #>  [3] \"species_taxid\"           \"species_name\"            #>  [5] \"species_common_name\"     \"species_ecotype\"         #>  [7] \"species_strain\"          \"species_isolate\"         #>  [9] \"species_cultivar\"        \"assembly_level\"          #> [11] \"assembly_status\"         \"assembly_name\"           #> [13] \"assembly_type\"           \"submission_date\"         #> [15] \"submitter\"               \"sequencing_technology\"   #> [17] \"atypical\"                \"refseq_category\"         #> [19] \"chromosome_count\"        \"sequence_length\"         #> [21] \"ungapped_length\"         \"contig_count\"            #> [23] \"contig_N50\"              \"contig_L50\"              #> [25] \"scaffold_count\"          \"scaffold_N50\"            #> [27] \"scaffold_L50\"            \"GC_percent\"              #> [29] \"annotation_provider\"     \"annotation_release_date\" #> [31] \"gene_count_total\"        \"gene_count_coding\"       #> [33] \"gene_count_noncoding\"    \"gene_count_pseudogene\"   #> [35] \"gene_count_other\"        \"CC_ratio\"  # Create a simulated data frame of stats for a maize genome my_stats <- data.frame(     accession = \"my_lovely_maize\",     sequence_length = 2.4 * 1e9,     gene_count_total = 50000,     CC_ratio = 2 )  # Compare stats compare_genome_stats(ncbi_stats = maize_stats, user_stats = my_stats) #>         accession         variable percentile rank #> 1 my_lovely_maize  sequence_length 0.97894737    3 #> 2 my_lovely_maize gene_count_total 1.00000000    1 #> 3 my_lovely_maize         CC_ratio 0.02941176    2"},{"path":"/articles/vignette_01_assessing_genome_assembly.html","id":"visualizing-summary-assembly-statistics","dir":"Articles","previous_headings":"Assessing genome assembly quality: statistics in a context","what":"Visualizing summary assembly statistics","title":"Assessing genome assembly and annotation quality","text":"visual representation summary stats obtained get_genome_stats(), use function plot_genome_stats().  Finally, can pass data frame observed stats highlight values (red points) distributions.","code":"# Summarize genome stats in a plot plot_genome_stats(ncbi_stats = maize_stats) plot_genome_stats(ncbi_stats = maize_stats, user_stats = my_stats)"},{"path":"/articles/vignette_01_assessing_genome_assembly.html","id":"assessing-gene-space-completeness-with-busco","dir":"Articles","previous_headings":"","what":"Assessing gene space completeness with BUSCO","title":"Assessing genome assembly and annotation quality","text":"One common metrics assess gene space completeness BUSCO (best universal single-copy orthologs) (Simão et al. 2015). cogeqc allows users run BUSCO R session visualize results graphically. BUSCO summary statistics help assess assemblies high quality based percentage complete BUSCOs.","code":""},{"path":"/articles/vignette_01_assessing_genome_assembly.html","id":"running-busco","dir":"Articles","previous_headings":"Assessing gene space completeness with BUSCO","what":"Running BUSCO","title":"Assessing genome assembly and annotation quality","text":"run BUSCO R, use function run_busco()2. , use example FASTA file containing first 1,000 lines Herbaspirilllum seropedicae SmR1 genome (GCA_000143225), downloaded Ensembl Bacteria. run BUSCO using burkholderiales_odb10 lineage dataset. view available datasets, run list_busco_datasets(). output stored directory specified outpath. can read parse BUSCO’s output function read_busco(). example, let’s read output BUSCO run using genome green algae Ostreococcus tauri. output directory /extdata. example output BUSCO run single FASTA file. can also specify directory containing multiple FASTA files sequence argument run_busco(). way, BUSCO run batch mode. Let’s see output BUSCO batch mode looks like: difference data frame previous one column File, contains information FASTA file. example dataset batch_summary contains output run_busco() using directory containing two genomes (Herbaspirillum seropedicae SmR1 Herbaspirillum rubrisubalbicans M1) parameter sequence argument.","code":"# Path to FASTA file sequence <- system.file(\"extdata\", \"Hse_subset.fa\", package = \"cogeqc\")  # Path to directory where BUSCO datasets will be stored download_path <- paste0(tempdir(), \"/datasets\")  # Run BUSCO if it is installed if(busco_is_installed()) {   run_busco(sequence, outlabel = \"Hse\", mode = \"genome\",             lineage = \"burkholderiales_odb10\",             outpath = tempdir(), download_path = download_path) } # Path to output directory output_dir <- system.file(\"extdata\", package = \"cogeqc\")  busco_summary <- read_busco(output_dir) busco_summary #>                Class Frequency           Lineage #> 1        Complete_SC      1412 chlorophyta_odb10 #> 2 Complete_duplicate         4 chlorophyta_odb10 #> 3         Fragmented        35 chlorophyta_odb10 #> 4            Missing        68 chlorophyta_odb10 data(batch_summary) batch_summary #>                Class Frequency               Lineage   File #> 1        Complete_SC      98.5 burkholderiales_odb10 Hse.fa #> 2        Complete_SC      98.8 burkholderiales_odb10 Hru.fa #> 3 Complete_duplicate       0.7 burkholderiales_odb10 Hse.fa #> 4 Complete_duplicate       0.7 burkholderiales_odb10 Hru.fa #> 5         Fragmented       0.4 burkholderiales_odb10 Hse.fa #> 6         Fragmented       0.3 burkholderiales_odb10 Hru.fa #> 7            Missing       0.4 burkholderiales_odb10 Hse.fa #> 8            Missing       0.2 burkholderiales_odb10 Hru.fa"},{"path":"/articles/vignette_01_assessing_genome_assembly.html","id":"visualizing-busco-summary-statistics","dir":"Articles","previous_headings":"Assessing gene space completeness with BUSCO","what":"Visualizing BUSCO summary statistics","title":"Assessing genome assembly and annotation quality","text":"using run_busco() parsing output read_busco(), users can visualize summary statistics plot_busco().   usually consider genomes >90% complete BUSCOs high quality. Thus, can conclude three genomes analyzed high-quality genomes.","code":"# Single FASTA file - Ostreococcus tauri plot_busco(busco_summary) # Batch mode - Herbaspirillum seropedicae and H. rubrisubalbicans plot_busco(batch_summary)"},{"path":"/articles/vignette_01_assessing_genome_assembly.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Assessing genome assembly and annotation quality","text":"document created following conditions:","code":"sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.2.1 (2022-06-23) #>  os       Ubuntu 20.04.4 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       UTC #>  date     2023-01-24 #>  pandoc   2.18 @ /usr/local/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package          * version  date (UTC) lib source #>  ape                5.6-2    2022-03-02 [1] RSPM (R 4.2.0) #>  aplot              0.1.9    2022-11-24 [1] RSPM (R 4.2.0) #>  beeswarm           0.4.0    2021-06-01 [1] RSPM (R 4.2.0) #>  BiocGenerics       0.42.0   2022-04-26 [1] Bioconductor #>  BiocManager        1.30.19  2022-10-25 [1] RSPM (R 4.2.0) #>  BiocStyle        * 2.24.0   2022-04-26 [1] Bioconductor #>  Biostrings         2.64.1   2022-08-18 [1] Bioconductor #>  bitops             1.0-7    2021-04-24 [1] CRAN (R 4.2.0) #>  bookdown           0.32     2023-01-17 [1] RSPM (R 4.2.0) #>  bslib              0.4.2    2022-12-16 [2] RSPM (R 4.2.0) #>  cachem             1.0.6    2021-08-19 [2] CRAN (R 4.2.0) #>  cli                3.6.0    2023-01-09 [2] RSPM (R 4.2.0) #>  cogeqc           * 1.3.1    2023-01-24 [1] Bioconductor #>  colorspace         2.0-3    2022-02-21 [1] CRAN (R 4.2.0) #>  crayon             1.5.2    2022-09-29 [2] RSPM (R 4.2.0) #>  desc               1.4.2    2022-09-08 [2] RSPM (R 4.2.0) #>  digest             0.6.31   2022-12-11 [2] RSPM (R 4.2.0) #>  dplyr              1.0.10   2022-09-01 [1] RSPM (R 4.2.0) #>  evaluate           0.20     2023-01-17 [2] RSPM (R 4.2.0) #>  fansi              1.0.4    2023-01-22 [2] RSPM (R 4.2.0) #>  farver             2.1.1    2022-07-06 [1] RSPM (R 4.2.0) #>  fastmap            1.1.0    2021-01-25 [2] CRAN (R 4.2.0) #>  fs                 1.5.2    2021-12-08 [2] CRAN (R 4.2.0) #>  generics           0.1.3    2022-07-05 [1] RSPM (R 4.2.0) #>  GenomeInfoDb       1.32.4   2022-09-06 [1] Bioconductor #>  GenomeInfoDbData   1.2.8    2022-05-02 [1] Bioconductor #>  ggbeeswarm         0.7.1    2022-12-16 [1] RSPM (R 4.2.0) #>  ggfun              0.0.9    2022-11-21 [1] RSPM (R 4.2.0) #>  ggplot2            3.4.0    2022-11-04 [1] RSPM (R 4.2.0) #>  ggplotify          0.1.0    2021-09-02 [1] RSPM (R 4.2.0) #>  ggtree             3.4.4    2022-09-27 [1] Bioconductor #>  glue               1.6.2    2022-02-24 [2] CRAN (R 4.2.0) #>  gridGraphics       0.5-1    2020-12-13 [1] RSPM (R 4.2.0) #>  gtable             0.3.1    2022-09-01 [1] RSPM (R 4.2.0) #>  highr              0.10     2022-12-22 [2] RSPM (R 4.2.0) #>  htmltools          0.5.4    2022-12-07 [2] RSPM (R 4.2.0) #>  igraph             1.3.5    2022-09-22 [1] RSPM (R 4.2.0) #>  IRanges            2.30.1   2022-08-18 [1] Bioconductor #>  jquerylib          0.1.4    2021-04-26 [2] CRAN (R 4.2.0) #>  jsonlite           1.8.4    2022-12-06 [2] RSPM (R 4.2.0) #>  knitr              1.41     2022-11-18 [2] RSPM (R 4.2.0) #>  labeling           0.4.2    2020-10-20 [1] CRAN (R 4.2.0) #>  lattice            0.20-45  2021-09-22 [3] CRAN (R 4.2.1) #>  lazyeval           0.2.2    2019-03-15 [1] CRAN (R 4.2.0) #>  lifecycle          1.0.3    2022-10-07 [2] RSPM (R 4.2.0) #>  magrittr           2.0.3    2022-03-30 [2] CRAN (R 4.2.0) #>  memoise            2.0.1    2021-11-26 [2] CRAN (R 4.2.0) #>  munsell            0.5.0    2018-06-12 [1] CRAN (R 4.2.0) #>  nlme               3.1-161  2022-12-15 [3] RSPM (R 4.2.0) #>  patchwork          1.1.2    2022-08-19 [1] RSPM (R 4.2.0) #>  pillar             1.8.1    2022-08-19 [2] RSPM (R 4.2.0) #>  pkgconfig          2.0.3    2019-09-22 [2] CRAN (R 4.2.0) #>  pkgdown            2.0.7    2022-12-14 [2] RSPM (R 4.2.0) #>  plyr               1.8.8    2022-11-11 [1] RSPM (R 4.2.0) #>  purrr              1.0.1    2023-01-10 [2] RSPM (R 4.2.0) #>  R6                 2.5.1    2021-08-19 [2] CRAN (R 4.2.0) #>  ragg               1.2.5    2023-01-12 [2] RSPM (R 4.2.0) #>  Rcpp               1.0.10   2023-01-22 [2] RSPM (R 4.2.0) #>  RCurl              1.98-1.9 2022-10-03 [1] RSPM (R 4.2.0) #>  reshape2           1.4.4    2020-04-09 [1] CRAN (R 4.2.0) #>  rlang              1.0.6    2022-09-24 [2] RSPM (R 4.2.0) #>  rmarkdown          2.20     2023-01-19 [2] RSPM (R 4.2.0) #>  rprojroot          2.0.3    2022-04-02 [2] CRAN (R 4.2.0) #>  S4Vectors          0.34.0   2022-04-26 [1] Bioconductor #>  sass               0.4.4    2022-11-24 [2] RSPM (R 4.2.0) #>  scales             1.2.1    2022-08-20 [1] RSPM (R 4.2.0) #>  sessioninfo        1.2.2    2021-12-06 [2] RSPM (R 4.2.0) #>  stringi            1.7.12   2023-01-11 [2] RSPM (R 4.2.0) #>  stringr            1.5.0    2022-12-02 [2] RSPM (R 4.2.0) #>  systemfonts        1.0.4    2022-02-11 [2] RSPM (R 4.2.0) #>  textshaping        0.3.6    2021-10-13 [2] RSPM (R 4.2.0) #>  tibble             3.1.8    2022-07-22 [2] RSPM (R 4.2.0) #>  tidyr              1.2.1    2022-09-08 [1] RSPM (R 4.2.0) #>  tidyselect         1.2.0    2022-10-10 [1] RSPM (R 4.2.0) #>  tidytree           0.4.2    2022-12-18 [1] RSPM (R 4.2.0) #>  treeio             1.20.2   2022-08-14 [1] Bioconductor #>  utf8               1.2.2    2021-07-24 [2] CRAN (R 4.2.0) #>  vctrs              0.5.1    2022-11-16 [2] RSPM (R 4.2.0) #>  vipor              0.4.5    2017-03-22 [1] RSPM (R 4.2.0) #>  withr              2.5.0    2022-03-03 [2] CRAN (R 4.2.0) #>  xfun               0.36     2022-12-21 [2] RSPM (R 4.2.0) #>  XVector            0.36.0   2022-04-26 [1] Bioconductor #>  yaml               2.3.6    2022-10-18 [2] RSPM (R 4.2.0) #>  yulab.utils        0.0.6    2022-12-20 [1] RSPM (R 4.2.0) #>  zlibbioc           1.42.0   2022-04-26 [1] Bioconductor #>  #>  [1] /__w/_temp/Library #>  [2] /usr/local/lib/R/site-library #>  [3] /usr/local/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":[]},{"path":"/articles/vignette_02_assessing_orthogroup_inference.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Assessing orthogroup inference","text":"identification groups homologous genes within across species powerful tool evolutionary genomics. widely used tools identify orthogroups (.e., groups orthologous genes) OrthoFinder (Emms Kelly 2019) OrthoMCL (Li, Stoeckert, Roos 2003). However, tools generate different results depending parameters used, mcl inflation parameter, E-value, maximum number hits, others. , propose protein domain-aware assessment orthogroup inference. goal maximize percentage shared protein domains genes orthogroup.","code":""},{"path":"/articles/vignette_02_assessing_orthogroup_inference.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Assessing orthogroup inference","text":"","code":"if(!requireNamespace('BiocManager', quietly = TRUE))   install.packages('BiocManager') BiocManager::install(\"cogeqc\") # Load package after installation library(cogeqc)"},{"path":"/articles/vignette_02_assessing_orthogroup_inference.html","id":"data-description","dir":"Articles","previous_headings":"","what":"Data description","title":"Assessing orthogroup inference","text":", use orthogroups PLAZA 5.0 database (Van Bel et al. 2021), inferred OrthoFinder (Emms Kelly 2019). purpose demonstration, complete dataset filtered keep orthogroups Brassicaceae species Arabidopsis thaliana Brassica oleraceae. Interpro domain annotations also retrieved PLAZA 5.0. infer orthogroups OrthoFinder, can read parse output file Orthogroups.tsv function read_orthogroups(). example:","code":"# Orthogroups for Arabidopsis thaliana and Brassica oleraceae data(og) head(og) #>     Orthogroup Species      Gene #> 1 HOM05D000001     Ath AT1G02310 #> 2 HOM05D000001     Ath AT1G03510 #> 3 HOM05D000001     Ath AT1G03540 #> 4 HOM05D000001     Ath AT1G04020 #> 5 HOM05D000001     Ath AT1G04840 #> 6 HOM05D000001     Ath AT1G05750  # Interpro domain annotations data(interpro_ath) data(interpro_bol)  head(interpro_ath) #>        Gene Annotation #> 1 AT1G01010  IPR036093 #> 2 AT1G01010  IPR003441 #> 3 AT1G01010  IPR036093 #> 4 AT1G01020  IPR007290 #> 5 AT1G01020  IPR007290 #> 6 AT1G01030  IPR003340 head(interpro_bol) #>           Gene Annotation #> 1 BolC1t00001H  IPR014710 #> 2 BolC1t00001H  IPR018490 #> 3 BolC1t00002H  IPR013057 #> 4 BolC1t00003H  IPR013057 #> 5 BolC1t00004H  IPR005178 #> 6 BolC1t00004H  IPR005178 # Path to the Orthogroups.tsv file created by OrthoFinder og_file <- system.file(\"extdata\", \"Orthogroups.tsv.gz\", package = \"cogeqc\")   # Read and parse file orthogroups <- read_orthogroups(og_file) head(orthogroups) #>     Orthogroup Species      Gene #> 1 HOM05D000001     Ath AT1G02310 #> 2 HOM05D000001     Ath AT1G03510 #> 3 HOM05D000001     Ath AT1G03540 #> 4 HOM05D000001     Ath AT1G04020 #> 5 HOM05D000001     Ath AT1G04840 #> 6 HOM05D000001     Ath AT1G05750"},{"path":"/articles/vignette_02_assessing_orthogroup_inference.html","id":"assessing-orthogroups","dir":"Articles","previous_headings":"","what":"Assessing orthogroups","title":"Assessing orthogroup inference","text":"cogeqc, can assess orthogroup inference either protein domain-based approach reference-based approach. approaches described .","code":""},{"path":"/articles/vignette_02_assessing_orthogroup_inference.html","id":"protein-domain-based-orthogroup-assessment","dir":"Articles","previous_headings":"Assessing orthogroups","what":"Protein domain-based orthogroup assessment","title":"Assessing orthogroup inference","text":"protein domain-based assessment orthogroups based formula : \\[ \\begin{aligned} Scores &= \\frac{Homogeneity}{Dispersal} \\\\ \\end{aligned} \\] numerator, \\(homogeneity\\), mean Sorensen-Dice index pairwise combinations genes orthogroup. Sorensen-Dice index measures similar two genes , ranges 0 1, 0 meaning gene pair share protein domain, 1 meaning shares protein domains. formal definition: \\[ \\begin{aligned} Homogeneity &=  \\frac{1}{N_{pairs}} \\sum_{=1}^{N_{pairs}} SDI_{} \\\\ \\\\ SDI(,B) &= \\frac{2 \\left| \\cap B \\right|}{ \\left|\\right| + \\left| B \\right|} \\end{aligned} \\] B set protein domains associated genes B. way, genes orthogroup protein domains, \\(homogeneity = 1\\). gene different protein domain, orthogroup \\(homogeneity = 0\\). gene pairs share domain, \\(homogeneity\\) somewhere 0 1. denominator, \\(dispersal\\), aims correct overclustering (.e., orthogroup assignments break “true” gene families artificially large number smaller subfamilies). mean number orthogroups containing protein domain corrected number orthogroup. Formally: \\[ \\begin{aligned} Dispersal &=  \\frac{1}{N_{domains} N_{OG}} \\sum_{=1}^{N_{domains}}D_{} \\\\ \\\\ \\end{aligned} \\] \\(N_{OG}\\) number orthogroups, \\(D_{}\\) number orthogroups containing protein domain \\(\\). term penalizes orthogroup assignments protein domains appears multiple orthogroups. orthogroups represent groups genes evolved common ancestor, protein domain present multiple orthogroups indicates domain evolved multiple times independent way, reasonable phylogenetic point view, despite convergent evolution. calculate scores orthogroup, can use function assess_orthogroups(). function takes input list annotation data frames1 orthogroups data frame, returns relative homogeneity scores orthogroup species. Note don’t want take dispersal account, can set correct_overclustering = FALSE. ignore denominator score formula. Now, can calculate mean score orthogroup inference. Ideally, reliable orthogroup inference, able run OrthoFinder multiple combinations parameters assess inference assess_orthogroups(). inference highest mean homonegeneity best.2","code":"# Create a list of annotation data frames annotation <- list(Ath = interpro_ath, Bol = interpro_bol) str(annotation) # This is what the list must look like #> List of 2 #>  $ Ath:'data.frame': 131661 obs. of  2 variables: #>   ..$ Gene      : chr [1:131661] \"AT1G01010\" \"AT1G01010\" \"AT1G01010\" \"AT1G01020\" ... #>   ..$ Annotation: chr [1:131661] \"IPR036093\" \"IPR003441\" \"IPR036093\" \"IPR007290\" ... #>  $ Bol:'data.frame': 212665 obs. of  2 variables: #>   ..$ Gene      : chr [1:212665] \"BolC1t00001H\" \"BolC1t00001H\" \"BolC1t00002H\" \"BolC1t00003H\" ... #>   ..$ Annotation: chr [1:212665] \"IPR014710\" \"IPR018490\" \"IPR013057\" \"IPR013057\" ...  og_assessment <- assess_orthogroups(og, annotation) head(og_assessment) #>    Orthogroups Ath_score Bol_score Mean_score Median_score #> 1 HOM05D000001  283.3132  271.9950   277.6541     277.6541 #> 2 HOM05D000002  129.9598  515.2557   322.6078     322.6078 #> 3 HOM05D000003  889.1268  848.1947   868.6607     868.6607 #> 4 HOM05D000004    0.0000  940.5871   470.2935     470.2935 #> 5 HOM05D000005 1135.8799  808.1998   972.0398     972.0398 #> 6 HOM05D000006 2820.8337  899.6528  1860.2433    1860.2433 mean(og_assessment$Mean_score) #> [1] 1686.855"},{"path":"/articles/vignette_02_assessing_orthogroup_inference.html","id":"reference-based-orthogroup-assessment","dir":"Articles","previous_headings":"Assessing orthogroups","what":"Reference-based orthogroup assessment","title":"Assessing orthogroup inference","text":"cases, may want compare orthogroup inference reference orthogroup inference. , can use function compare_orthogroups(). example, let’s simulate different orthogroup inference shuffling rows og data frame compare original data frame. can see, 27.03% orthogroups reference data set preserved shuffled data set.","code":"set.seed(123)  # Subset the top 5000 rows for demonstration purposes og_subset <- og[1:5000, ] ref <- og_subset  # Shuffle 100 genes to simulate a test set idx_shuffle <- sample(seq_len(nrow(og_subset)), 100, replace = FALSE) test <- og_subset test$Gene[idx_shuffle] <- sample(   test$Gene[idx_shuffle], size = length(idx_shuffle), replace = FALSE )  # Compare test set to reference set comparison <- compare_orthogroups(ref, test) head(comparison) #>     Orthogroup Preserved #> 1 HOM05D000001     FALSE #> 2 HOM05D000002     FALSE #> 3 HOM05D000003     FALSE #> 4 HOM05D000004      TRUE #> 5 HOM05D000005     FALSE #> 6 HOM05D000006      TRUE  # Calculating percentage of preservation preserved <- sum(comparison$Preserved) / length(comparison$Preserved) preserved #> [1] 0.2702703"},{"path":"/articles/vignette_02_assessing_orthogroup_inference.html","id":"visualizing-summary-statistics","dir":"Articles","previous_headings":"","what":"Visualizing summary statistics","title":"Assessing orthogroup inference","text":"Now identified best combination parameters orthogroup inference, can visually explore summary statistics. OrthoFinder automatically saves summary statistics directory named Comparative_Genomics_Statistics. can parse directory list summary statistics function read_orthofinder_stats(). demonstrate , let’s read output OrthoFinder’s example model species. Now, can use list visually explore summary statistics.","code":"stats_dir <- system.file(\"extdata\", package = \"cogeqc\") ortho_stats <- read_orthofinder_stats(stats_dir) ortho_stats #> $stats #>                   Species N_genes N_genes_in_OGs Perc_genes_in_OGs N_ssOGs #> 1             Danio_rerio   30313          28236              93.1     569 #> 2 Drosophila_melanogaster   13931          10674              76.6     675 #> 3            Homo_sapiens   23480          22669              96.5     268 #> 4            Mus_musculus   22859          22006              96.3     243 #> 5       Takifugu_rubripes   20545          19403              94.4     135 #> 6      Xenopus_tropicalis   19987          18755              93.8     234 #>   N_genes_in_ssOGs Perc_genes_in_ssOGs Dups #> 1             3216                10.6 9585 #> 2             3313                23.8 3353 #> 3             1625                 6.9 4527 #> 4             2022                 8.8 4131 #> 5              446                 2.2 2283 #> 6             1580                 7.9 3650 #>  #> $og_overlap #>                         Danio_rerio Drosophila_melanogaster Homo_sapiens #> Danio_rerio                   13472                    5872        11365 #> Drosophila_melanogaster        5872                    6651         5866 #> Homo_sapiens                  11365                    5866        14468 #> Mus_musculus                  11345                    5863        14076 #> Takifugu_rubripes             12100                    5810        10994 #> Xenopus_tropicalis            11086                    5725        11478 #>                         Mus_musculus Takifugu_rubripes Xenopus_tropicalis #> Danio_rerio                    11345             12100              11086 #> Drosophila_melanogaster         5863              5810               5725 #> Homo_sapiens                   14076             10994              11478 #> Mus_musculus                   14411             10976              11446 #> Takifugu_rubripes              10976             12649              10776 #> Xenopus_tropicalis             11446             10776              12302 #>  #> $duplications #>                       Node Duplications_50 #> 1  Drosophila_melanogaster            3353 #> 2             Homo_sapiens            4527 #> 3                       N0              73 #> 4        Takifugu_rubripes            2283 #> 5             Mus_musculus            4131 #> 6              Danio_rerio            9585 #> 7                       N1            2458 #> 8                       N2            1530 #> 9                       N3             195 #> 10                      N4             745 #> 11      Xenopus_tropicalis            3650"},{"path":"/articles/vignette_02_assessing_orthogroup_inference.html","id":"species-tree","dir":"Articles","previous_headings":"Visualizing summary statistics","what":"Species tree","title":"Assessing orthogroup inference","text":"start, one usually want look species tree detect possible issues compromise accuracy orthologs detection. tree file can easily read treeio::read.tree().  can also include number gene duplications node.","code":"data(tree) plot_species_tree(tree) plot_species_tree(tree, stats_list = ortho_stats)"},{"path":"/articles/vignette_02_assessing_orthogroup_inference.html","id":"species-specific-duplications","dir":"Articles","previous_headings":"Visualizing summary statistics","what":"Species-specific duplications","title":"Assessing orthogroup inference","text":"species tree shows duplications per node, show species-duplications. visualize , can use function plot_duplications().","code":"plot_duplications(ortho_stats)"},{"path":"/articles/vignette_02_assessing_orthogroup_inference.html","id":"genes-in-orthogroups","dir":"Articles","previous_headings":"Visualizing summary statistics","what":"Genes in orthogroups","title":"Assessing orthogroup inference","text":"Visualizing percentage genes orthogroups particularly useful quality check, since one usually expect large percentage genes orthogroups, unless distant species OrthoFinder’s input proteome data.","code":"plot_genes_in_ogs(ortho_stats)"},{"path":"/articles/vignette_02_assessing_orthogroup_inference.html","id":"species-specific-orthogroups","dir":"Articles","previous_headings":"Visualizing summary statistics","what":"Species-specific orthogroups","title":"Assessing orthogroup inference","text":"visualize number species-specific orthogroups, use function plot_species_specific_ogs(). plot can reveal unique gene repertoire particular species large number species-specific OGs compared ones.","code":"plot_species_specific_ogs(ortho_stats)"},{"path":"/articles/vignette_02_assessing_orthogroup_inference.html","id":"all-in-one","dir":"Articles","previous_headings":"Visualizing summary statistics","what":"All in one","title":"Assessing orthogroup inference","text":"get complete picture OrthoFinder results, can combine plots together plot_orthofinder_stats(), wrapper integrates previously demonstrated plotting functions.","code":"plot_orthofinder_stats(   tree,    xlim = c(-0.1, 2),   stats_list = ortho_stats )"},{"path":"/articles/vignette_02_assessing_orthogroup_inference.html","id":"orthogroup-overlap","dir":"Articles","previous_headings":"Visualizing summary statistics","what":"Orthogroup overlap","title":"Assessing orthogroup inference","text":"can also visualize heatmap pairwise orthogroup overlap across species plot_og_overlap().","code":"plot_og_overlap(ortho_stats)"},{"path":"/articles/vignette_02_assessing_orthogroup_inference.html","id":"orthogroup-size-per-species","dir":"Articles","previous_headings":"Visualizing summary statistics","what":"Orthogroup size per species","title":"Assessing orthogroup inference","text":"want take look distribution OG sizes species, can use function plot_og_sizes. many extreme values want visualize shape distribution better way, can log transform OG sizes (log = TRUE) /remove OG larger particular threshold (max_size = 100, example).","code":"plot_og_sizes(og) plot_og_sizes(og, log = TRUE) # natural logarithm scale plot_og_sizes(og, max_size = 100) # only OGs with <= 100 genes"},{"path":"/articles/vignette_02_assessing_orthogroup_inference.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Assessing orthogroup inference","text":"document created following conditions:","code":"sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.2.1 (2022-06-23) #>  os       Ubuntu 20.04.4 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       UTC #>  date     2023-01-24 #>  pandoc   2.18 @ /usr/local/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package          * version  date (UTC) lib source #>  ape                5.6-2    2022-03-02 [1] RSPM (R 4.2.0) #>  aplot              0.1.9    2022-11-24 [1] RSPM (R 4.2.0) #>  beeswarm           0.4.0    2021-06-01 [1] RSPM (R 4.2.0) #>  BiocGenerics       0.42.0   2022-04-26 [1] Bioconductor #>  BiocManager        1.30.19  2022-10-25 [1] RSPM (R 4.2.0) #>  BiocStyle        * 2.24.0   2022-04-26 [1] Bioconductor #>  Biostrings         2.64.1   2022-08-18 [1] Bioconductor #>  bitops             1.0-7    2021-04-24 [1] CRAN (R 4.2.0) #>  bookdown           0.32     2023-01-17 [1] RSPM (R 4.2.0) #>  bslib              0.4.2    2022-12-16 [2] RSPM (R 4.2.0) #>  cachem             1.0.6    2021-08-19 [2] CRAN (R 4.2.0) #>  cli                3.6.0    2023-01-09 [2] RSPM (R 4.2.0) #>  cogeqc           * 1.3.1    2023-01-24 [1] Bioconductor #>  colorspace         2.0-3    2022-02-21 [1] CRAN (R 4.2.0) #>  crayon             1.5.2    2022-09-29 [2] RSPM (R 4.2.0) #>  desc               1.4.2    2022-09-08 [2] RSPM (R 4.2.0) #>  digest             0.6.31   2022-12-11 [2] RSPM (R 4.2.0) #>  dplyr              1.0.10   2022-09-01 [1] RSPM (R 4.2.0) #>  evaluate           0.20     2023-01-17 [2] RSPM (R 4.2.0) #>  fansi              1.0.4    2023-01-22 [2] RSPM (R 4.2.0) #>  farver             2.1.1    2022-07-06 [1] RSPM (R 4.2.0) #>  fastmap            1.1.0    2021-01-25 [2] CRAN (R 4.2.0) #>  fs                 1.5.2    2021-12-08 [2] CRAN (R 4.2.0) #>  generics           0.1.3    2022-07-05 [1] RSPM (R 4.2.0) #>  GenomeInfoDb       1.32.4   2022-09-06 [1] Bioconductor #>  GenomeInfoDbData   1.2.8    2022-05-02 [1] Bioconductor #>  ggbeeswarm         0.7.1    2022-12-16 [1] RSPM (R 4.2.0) #>  ggfun              0.0.9    2022-11-21 [1] RSPM (R 4.2.0) #>  ggplot2            3.4.0    2022-11-04 [1] RSPM (R 4.2.0) #>  ggplotify          0.1.0    2021-09-02 [1] RSPM (R 4.2.0) #>  ggtree             3.4.4    2022-09-27 [1] Bioconductor #>  glue               1.6.2    2022-02-24 [2] CRAN (R 4.2.0) #>  gridGraphics       0.5-1    2020-12-13 [1] RSPM (R 4.2.0) #>  gtable             0.3.1    2022-09-01 [1] RSPM (R 4.2.0) #>  highr              0.10     2022-12-22 [2] RSPM (R 4.2.0) #>  htmltools          0.5.4    2022-12-07 [2] RSPM (R 4.2.0) #>  igraph             1.3.5    2022-09-22 [1] RSPM (R 4.2.0) #>  IRanges            2.30.1   2022-08-18 [1] Bioconductor #>  jquerylib          0.1.4    2021-04-26 [2] CRAN (R 4.2.0) #>  jsonlite           1.8.4    2022-12-06 [2] RSPM (R 4.2.0) #>  knitr              1.41     2022-11-18 [2] RSPM (R 4.2.0) #>  labeling           0.4.2    2020-10-20 [1] CRAN (R 4.2.0) #>  lattice            0.20-45  2021-09-22 [3] CRAN (R 4.2.1) #>  lazyeval           0.2.2    2019-03-15 [1] CRAN (R 4.2.0) #>  lifecycle          1.0.3    2022-10-07 [2] RSPM (R 4.2.0) #>  magrittr           2.0.3    2022-03-30 [2] CRAN (R 4.2.0) #>  memoise            2.0.1    2021-11-26 [2] CRAN (R 4.2.0) #>  munsell            0.5.0    2018-06-12 [1] CRAN (R 4.2.0) #>  nlme               3.1-161  2022-12-15 [3] RSPM (R 4.2.0) #>  patchwork          1.1.2    2022-08-19 [1] RSPM (R 4.2.0) #>  pillar             1.8.1    2022-08-19 [2] RSPM (R 4.2.0) #>  pkgconfig          2.0.3    2019-09-22 [2] CRAN (R 4.2.0) #>  pkgdown            2.0.7    2022-12-14 [2] RSPM (R 4.2.0) #>  plyr               1.8.8    2022-11-11 [1] RSPM (R 4.2.0) #>  purrr              1.0.1    2023-01-10 [2] RSPM (R 4.2.0) #>  R6                 2.5.1    2021-08-19 [2] CRAN (R 4.2.0) #>  ragg               1.2.5    2023-01-12 [2] RSPM (R 4.2.0) #>  Rcpp               1.0.10   2023-01-22 [2] RSPM (R 4.2.0) #>  RCurl              1.98-1.9 2022-10-03 [1] RSPM (R 4.2.0) #>  reshape2           1.4.4    2020-04-09 [1] CRAN (R 4.2.0) #>  rlang              1.0.6    2022-09-24 [2] RSPM (R 4.2.0) #>  rmarkdown          2.20     2023-01-19 [2] RSPM (R 4.2.0) #>  rprojroot          2.0.3    2022-04-02 [2] CRAN (R 4.2.0) #>  S4Vectors          0.34.0   2022-04-26 [1] Bioconductor #>  sass               0.4.4    2022-11-24 [2] RSPM (R 4.2.0) #>  scales             1.2.1    2022-08-20 [1] RSPM (R 4.2.0) #>  sessioninfo        1.2.2    2021-12-06 [2] RSPM (R 4.2.0) #>  stringi            1.7.12   2023-01-11 [2] RSPM (R 4.2.0) #>  stringr            1.5.0    2022-12-02 [2] RSPM (R 4.2.0) #>  systemfonts        1.0.4    2022-02-11 [2] RSPM (R 4.2.0) #>  textshaping        0.3.6    2021-10-13 [2] RSPM (R 4.2.0) #>  tibble             3.1.8    2022-07-22 [2] RSPM (R 4.2.0) #>  tidyr              1.2.1    2022-09-08 [1] RSPM (R 4.2.0) #>  tidyselect         1.2.0    2022-10-10 [1] RSPM (R 4.2.0) #>  tidytree           0.4.2    2022-12-18 [1] RSPM (R 4.2.0) #>  treeio             1.20.2   2022-08-14 [1] Bioconductor #>  utf8               1.2.2    2021-07-24 [2] CRAN (R 4.2.0) #>  vctrs              0.5.1    2022-11-16 [2] RSPM (R 4.2.0) #>  vipor              0.4.5    2017-03-22 [1] RSPM (R 4.2.0) #>  withr              2.5.0    2022-03-03 [2] CRAN (R 4.2.0) #>  xfun               0.36     2022-12-21 [2] RSPM (R 4.2.0) #>  XVector            0.36.0   2022-04-26 [1] Bioconductor #>  yaml               2.3.6    2022-10-18 [2] RSPM (R 4.2.0) #>  yulab.utils        0.0.6    2022-12-20 [1] RSPM (R 4.2.0) #>  zlibbioc           1.42.0   2022-04-26 [1] Bioconductor #>  #>  [1] /__w/_temp/Library #>  [2] /usr/local/lib/R/site-library #>  [3] /usr/local/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":[]},{"path":"/articles/vignette_03_assessing_synteny.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Assessing synteny identification","text":"Synteny analysis allows identification conserved gene content gene order (collinearity) genomic segment, often used study genomic rearrangements shaped genomes course evolution. However, accurate detection syntenic blocks highly dependent parameters minimum number anchors, maximum number upstream downstream genes search syntenic blocks. Zhao Schranz (2019) proposed network-based synteny analysis (algorithm now implemented Bioconductor package syntenet) allows identification optimal parameters using network’s average clustering coefficient number nodes. , slightly modified approach also take account well network’s degree distribution fits scale-free topology, typical property biological networks. method allows users identify best combination parameters synteny detection synteny network inference.","code":""},{"path":"/articles/vignette_03_assessing_synteny.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Assessing synteny identification","text":"install package Bioconductor, use following code: Loading package installtion:","code":"if(!requireNamespace('BiocManager', quietly = TRUE))   install.packages('BiocManager') BiocManager::install(\"cogeqc\") # Load package after installation library(cogeqc) set.seed(123) # for reproducibility"},{"path":"/articles/vignette_03_assessing_synteny.html","id":"data-description","dir":"Articles","previous_headings":"","what":"Data description","title":"Assessing synteny identification","text":", use subset synteny network inferred Zhao Schranz (2019) contains synteny network Brassica oleraceae, B. napus, B. rapa.","code":"# Load synteny network for  data(synnet)  head(synnet) #>             anchor1        anchor2 #> 1 bnp_BnaA01g05780D bol_Bo1g011310 #> 2 bnp_BnaA01g05800D bol_Bo1g011320 #> 3 bnp_BnaA01g05810D bol_Bo1g011330 #> 4 bnp_BnaA01g05820D bol_Bo1g011340 #> 5 bnp_BnaA01g05830D bol_Bo1g011350 #> 6 bnp_BnaA01g05840D bol_Bo1g011360"},{"path":"/articles/vignette_03_assessing_synteny.html","id":"network-based-assessment-of-synteny-identification","dir":"Articles","previous_headings":"","what":"Network-based assessment of synteny identification","title":"Assessing synteny identification","text":"assess synteny detection, calculate synteny network score follows: \\[ \\begin{aligned} Score &= C N R^2_{SFT} \\end{aligned} \\] \\(C\\) network’s clustering coefficient, \\(N\\) number nodes, \\(R^2_{SFT}\\) coefficient determination scale-free topology fit. network highest score considered accurate. score network, use function assess_synnet(). Ideally, infer synteny networks using syntenet multiple combinations parameters assess network pick best. demonstrate , let’s simulate different networks resampling calculate scores wrapper function assess_synnet_list(). can see, first (original) network best, highest score.","code":"assess_synnet(synnet) #>         CC Node_count  Rsquared    Score #> 1 0.877912     149144 0.6806854 89125.76 # Simulate networks net1 <- synnet net2 <- synnet[-sample(1:10000, 500), ] net3 <- synnet[-sample(1:10000, 1000), ] synnet_list <- list(   net1 = net1,    net2 = net2,    net3 = net3 )  # Assess original network + 2 simulations synnet_assesment <- assess_synnet_list(synnet_list) synnet_assesment #>          CC Node_count  Rsquared    Score Network #> 1 0.8779120     149144 0.6806854 89125.76    net1 #> 2 0.8769428     149133 0.6813367 89105.97    net2 #> 3 0.8758974     149114 0.6810978 88957.20    net3  # Determine the best network synnet_assesment$Network[which.max(synnet_assesment$Score)] #> [1] \"net1\""},{"path":"/articles/vignette_03_assessing_synteny.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Assessing synteny identification","text":"document created following conditions:","code":"sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.2.1 (2022-06-23) #>  os       Ubuntu 20.04.4 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       UTC #>  date     2023-01-24 #>  pandoc   2.18 @ /usr/local/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package          * version  date (UTC) lib source #>  ape                5.6-2    2022-03-02 [1] RSPM (R 4.2.0) #>  aplot              0.1.9    2022-11-24 [1] RSPM (R 4.2.0) #>  beeswarm           0.4.0    2021-06-01 [1] RSPM (R 4.2.0) #>  BiocGenerics       0.42.0   2022-04-26 [1] Bioconductor #>  BiocManager        1.30.19  2022-10-25 [1] RSPM (R 4.2.0) #>  BiocStyle        * 2.24.0   2022-04-26 [1] Bioconductor #>  Biostrings         2.64.1   2022-08-18 [1] Bioconductor #>  bitops             1.0-7    2021-04-24 [1] CRAN (R 4.2.0) #>  bookdown           0.32     2023-01-17 [1] RSPM (R 4.2.0) #>  bslib              0.4.2    2022-12-16 [2] RSPM (R 4.2.0) #>  cachem             1.0.6    2021-08-19 [2] CRAN (R 4.2.0) #>  cli                3.6.0    2023-01-09 [2] RSPM (R 4.2.0) #>  cogeqc           * 1.3.1    2023-01-24 [1] Bioconductor #>  colorspace         2.0-3    2022-02-21 [1] CRAN (R 4.2.0) #>  crayon             1.5.2    2022-09-29 [2] RSPM (R 4.2.0) #>  desc               1.4.2    2022-09-08 [2] RSPM (R 4.2.0) #>  digest             0.6.31   2022-12-11 [2] RSPM (R 4.2.0) #>  dplyr              1.0.10   2022-09-01 [1] RSPM (R 4.2.0) #>  evaluate           0.20     2023-01-17 [2] RSPM (R 4.2.0) #>  fansi              1.0.4    2023-01-22 [2] RSPM (R 4.2.0) #>  fastmap            1.1.0    2021-01-25 [2] CRAN (R 4.2.0) #>  fs                 1.5.2    2021-12-08 [2] CRAN (R 4.2.0) #>  generics           0.1.3    2022-07-05 [1] RSPM (R 4.2.0) #>  GenomeInfoDb       1.32.4   2022-09-06 [1] Bioconductor #>  GenomeInfoDbData   1.2.8    2022-05-02 [1] Bioconductor #>  ggbeeswarm         0.7.1    2022-12-16 [1] RSPM (R 4.2.0) #>  ggfun              0.0.9    2022-11-21 [1] RSPM (R 4.2.0) #>  ggplot2            3.4.0    2022-11-04 [1] RSPM (R 4.2.0) #>  ggplotify          0.1.0    2021-09-02 [1] RSPM (R 4.2.0) #>  ggtree             3.4.4    2022-09-27 [1] Bioconductor #>  glue               1.6.2    2022-02-24 [2] CRAN (R 4.2.0) #>  gridGraphics       0.5-1    2020-12-13 [1] RSPM (R 4.2.0) #>  gtable             0.3.1    2022-09-01 [1] RSPM (R 4.2.0) #>  htmltools          0.5.4    2022-12-07 [2] RSPM (R 4.2.0) #>  igraph             1.3.5    2022-09-22 [1] RSPM (R 4.2.0) #>  IRanges            2.30.1   2022-08-18 [1] Bioconductor #>  jquerylib          0.1.4    2021-04-26 [2] CRAN (R 4.2.0) #>  jsonlite           1.8.4    2022-12-06 [2] RSPM (R 4.2.0) #>  knitr              1.41     2022-11-18 [2] RSPM (R 4.2.0) #>  lattice            0.20-45  2021-09-22 [3] CRAN (R 4.2.1) #>  lazyeval           0.2.2    2019-03-15 [1] CRAN (R 4.2.0) #>  lifecycle          1.0.3    2022-10-07 [2] RSPM (R 4.2.0) #>  magrittr           2.0.3    2022-03-30 [2] CRAN (R 4.2.0) #>  memoise            2.0.1    2021-11-26 [2] CRAN (R 4.2.0) #>  munsell            0.5.0    2018-06-12 [1] CRAN (R 4.2.0) #>  nlme               3.1-161  2022-12-15 [3] RSPM (R 4.2.0) #>  patchwork          1.1.2    2022-08-19 [1] RSPM (R 4.2.0) #>  pillar             1.8.1    2022-08-19 [2] RSPM (R 4.2.0) #>  pkgconfig          2.0.3    2019-09-22 [2] CRAN (R 4.2.0) #>  pkgdown            2.0.7    2022-12-14 [2] RSPM (R 4.2.0) #>  plyr               1.8.8    2022-11-11 [1] RSPM (R 4.2.0) #>  purrr              1.0.1    2023-01-10 [2] RSPM (R 4.2.0) #>  R6                 2.5.1    2021-08-19 [2] CRAN (R 4.2.0) #>  ragg               1.2.5    2023-01-12 [2] RSPM (R 4.2.0) #>  Rcpp               1.0.10   2023-01-22 [2] RSPM (R 4.2.0) #>  RCurl              1.98-1.9 2022-10-03 [1] RSPM (R 4.2.0) #>  reshape2           1.4.4    2020-04-09 [1] CRAN (R 4.2.0) #>  rlang              1.0.6    2022-09-24 [2] RSPM (R 4.2.0) #>  rmarkdown          2.20     2023-01-19 [2] RSPM (R 4.2.0) #>  rprojroot          2.0.3    2022-04-02 [2] CRAN (R 4.2.0) #>  S4Vectors          0.34.0   2022-04-26 [1] Bioconductor #>  sass               0.4.4    2022-11-24 [2] RSPM (R 4.2.0) #>  scales             1.2.1    2022-08-20 [1] RSPM (R 4.2.0) #>  sessioninfo        1.2.2    2021-12-06 [2] RSPM (R 4.2.0) #>  stringi            1.7.12   2023-01-11 [2] RSPM (R 4.2.0) #>  stringr            1.5.0    2022-12-02 [2] RSPM (R 4.2.0) #>  systemfonts        1.0.4    2022-02-11 [2] RSPM (R 4.2.0) #>  textshaping        0.3.6    2021-10-13 [2] RSPM (R 4.2.0) #>  tibble             3.1.8    2022-07-22 [2] RSPM (R 4.2.0) #>  tidyr              1.2.1    2022-09-08 [1] RSPM (R 4.2.0) #>  tidyselect         1.2.0    2022-10-10 [1] RSPM (R 4.2.0) #>  tidytree           0.4.2    2022-12-18 [1] RSPM (R 4.2.0) #>  treeio             1.20.2   2022-08-14 [1] Bioconductor #>  utf8               1.2.2    2021-07-24 [2] CRAN (R 4.2.0) #>  vctrs              0.5.1    2022-11-16 [2] RSPM (R 4.2.0) #>  vipor              0.4.5    2017-03-22 [1] RSPM (R 4.2.0) #>  xfun               0.36     2022-12-21 [2] RSPM (R 4.2.0) #>  XVector            0.36.0   2022-04-26 [1] Bioconductor #>  yaml               2.3.6    2022-10-18 [2] RSPM (R 4.2.0) #>  yulab.utils        0.0.6    2022-12-20 [1] RSPM (R 4.2.0) #>  zlibbioc           1.42.0   2022-04-26 [1] Bioconductor #>  #>  [1] /__w/_temp/Library #>  [2] /usr/local/lib/R/site-library #>  [3] /usr/local/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabrício Almeida-Silva. Author, maintainer. Yves Van de Peer. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Almeida-Silva F, Van de Peer Y (2023). cogeqc: Systematic quality checks comparative genomics analyses. R package version 1.3.1, https://github.com/almeidasilvaf/cogeqc.","code":"@Manual{,   title = {cogeqc: Systematic quality checks on comparative genomics analyses},   author = {Fabrício Almeida-Silva and Yves {Van de Peer}},   year = {2023},   note = {R package version 1.3.1},   url = {https://github.com/almeidasilvaf/cogeqc}, }"},{"path":"/index.html","id":"cogeqc-","dir":"","previous_headings":"","what":"Systematic quality checks on comparative genomics analyses","title":"Systematic quality checks on comparative genomics analyses","text":"goal cogeqc facilitate systematic quality checks standard comparative genomics analyses help researchers detect issues select suitable parameters data set. Currently, cogeqc can used assess: Genome assembly annotation quality: using two approaches: Statistics context: users can extract summary assembly annotation statistics genomes NCBI (via NCBI Datasets API) compare observed values (e.g., genome size, number genes, contiguity measures) previously reported values NCBI genomes. Gene space completeness BUSCOs: users can assess gene space completeness using Best Universal Single-Copy Orthologs (BUSCOs) wrapper functions run BUSCO comfort R session create publication-ready plots summary statistics. Orthogroup inference: orthogroups assessed based percentage shared protein domains ortogroups. rationale approach genes orthogroup evolved common ancestor, percentage conserved protein domains orthogroup high possible. Synteny detection: synteny detection assessed using network-based approaches, namely clustering coefficient degree synteny network.","code":""},{"path":"/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation instructions","title":"Systematic quality checks on comparative genomics analyses","text":"Get latest stable R release CRAN. install cogeqc using Bioconductor following code: development version GitHub :","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"cogeqc\") BiocManager::install(\"almeidasilvaf/cogeqc\")"},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Systematic quality checks on comparative genomics analyses","text":"citation output using citation('cogeqc') R. Please run check updates cite cogeqc. Please note cogeqc made possible thanks many R bioinformatics software authors, cited either vignettes /paper(s) describing package.","code":"print(citation('cogeqc'), bibtex = TRUE) #>  #> To cite package 'cogeqc' in publications use: #>  #>   Almeida-Silva F, Van de Peer Y (2022). _cogeqc: Systematic quality #>   checks on comparative genomics analyses_. R package version 1.3.0, #>   <https://github.com/almeidasilvaf/cogeqc>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {cogeqc: Systematic quality checks on comparative genomics analyses}, #>     author = {Fabrício Almeida-Silva and Yves {Van de Peer}}, #>     year = {2022}, #>     note = {R package version 1.3.0}, #>     url = {https://github.com/almeidasilvaf/cogeqc}, #>   }"},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Systematic quality checks on comparative genomics analyses","text":"Please note cogeqc project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/index.html","id":"development-tools","dir":"","previous_headings":"","what":"Development tools","title":"Systematic quality checks on comparative genomics analyses","text":"Continuous code testing possible thanks GitHub actions usethis, remotes, rcmdcheck customized use Bioconductor’s docker containers BiocCheck. Code coverage assessment possible thanks codecov covr. documentation website automatically updated thanks pkgdown. documentation formatted thanks devtools roxygen2. details, check dev directory. package developed using biocthis.","code":""},{"path":"/reference/assess_orthogroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess orthogroup inference based on functional annotation — assess_orthogroups","title":"Assess orthogroup inference based on functional annotation — assess_orthogroups","text":"Assess orthogroup inference based functional annotation","code":""},{"path":"/reference/assess_orthogroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess orthogroup inference based on functional annotation — assess_orthogroups","text":"","code":"assess_orthogroups(   orthogroups = NULL,   annotation = NULL,   correct_overclustering = TRUE )"},{"path":"/reference/assess_orthogroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess orthogroup inference based on functional annotation — assess_orthogroups","text":"orthogroups 3-column data frame columns Orthogroup, Species, Gene. data frame can created 'Orthogroups.tsv' file generated OrthoFinder function read_orthogroups(). annotation list 2-column data frames columns Gene (gene ID) Annotation (annotation ID). names list elements must correspond species names second column orthogroups. instance, two species orthogroups data frame named \"SpeciesA\" \"SpeciesB\", annotation must list 2 data frames, list element must named \"SpeciesA\" \"SpeciesB\". correct_overclustering Logical indicating whether correct overclustering orthogroups. Default: TRUE.","code":""},{"path":"/reference/assess_orthogroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess orthogroup inference based on functional annotation — assess_orthogroups","text":"data frame.","code":""},{"path":"/reference/assess_orthogroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess orthogroup inference based on functional annotation — assess_orthogroups","text":"","code":"data(og) data(interpro_ath) data(interpro_bol) # Subsetting annotation for demonstration purposes. annotation <- list(Ath = interpro_ath[1:1000,], Bol = interpro_bol[1:1000,]) assess <- assess_orthogroups(og, annotation)"},{"path":"/reference/assess_synnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess synteny network based on graph properties — assess_synnet","title":"Assess synteny network based on graph properties — assess_synnet","text":"Assess synteny network based graph properties","code":""},{"path":"/reference/assess_synnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess synteny network based on graph properties — assess_synnet","text":"","code":"assess_synnet(synnet = NULL, cc_type = \"average\")"},{"path":"/reference/assess_synnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess synteny network based on graph properties — assess_synnet","text":"synnet Edge list synteny network 2-column data frame, columns 1 2 representing names loci anchor 1 anchor 2, respectively. cc_type Type clustering coefficient calculated. One 'global' 'average'. Default: 'average'.","code":""},{"path":"/reference/assess_synnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess synteny network based on graph properties — assess_synnet","text":"data frame following variables: CC Numeric representing clustering coefficient. Node_count Numeric representing number nodes network. Rsquared Numeric indicating coefficient determination scale-free topology fit. Score Numeric representing network score, product 'CC' 'Node_number'.","code":""},{"path":"/reference/assess_synnet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assess synteny network based on graph properties — assess_synnet","text":"Network score product network's clustering coefficient, node count, R squared scale-free topology fit.","code":""},{"path":"/reference/assess_synnet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess synteny network based on graph properties — assess_synnet","text":"","code":"data(synnet) assess_synnet(synnet) #>         CC Node_count  Rsquared    Score #> 1 0.877912     149144 0.6806854 89125.76"},{"path":"/reference/assess_synnet_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess list of synteny networks as in assess_synnet — assess_synnet_list","title":"Assess list of synteny networks as in assess_synnet — assess_synnet_list","text":"Assess list synteny networks assess_synnet","code":""},{"path":"/reference/assess_synnet_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess list of synteny networks as in assess_synnet — assess_synnet_list","text":"","code":"assess_synnet_list(synnet_list = NULL, cc_type = \"average\")"},{"path":"/reference/assess_synnet_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess list of synteny networks as in assess_synnet — assess_synnet_list","text":"synnet_list list networks, network edge list 2-column data frame, columns 1 2 representing names loci anchor 1 anchor 2, respectively. cc_type Type clustering coefficient calculated. One 'global' 'average'. Default: 'average'.","code":""},{"path":"/reference/assess_synnet_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess list of synteny networks as in assess_synnet — assess_synnet_list","text":"data frame following variables: CC Numeric representing clustering coefficient. Node_count Numeric representing number nodes network. Rsquared Numeric indicating coefficient determination scale-free topology fit. Score Numeric representing network score, product 'CC' 'Node_number'. Network Character network name.","code":""},{"path":"/reference/assess_synnet_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess list of synteny networks as in assess_synnet — assess_synnet_list","text":"","code":"set.seed(123) data(synnet) net1 <- synnet net2 <- synnet[-sample(1:10000, 500), ] net3 <- synnet[-sample(1:10000, 1000), ] synnet_list <- list(net1 = net1, net2 = net2, net3 = net3) assess_synnet_list(synnet_list) #>          CC Node_count  Rsquared    Score Network #> 1 0.8779120     149144 0.6806854 89125.76    net1 #> 2 0.8769428     149133 0.6813367 89105.97    net2 #> 3 0.8758974     149114 0.6810978 88957.20    net3"},{"path":"/reference/batch_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"BUSCO summary output for batch mode — batch_summary","title":"BUSCO summary output for batch mode — batch_summary","text":"object created function read_busco() using batch run BUSCO genomes Herbaspirillum seropedicae SmR1 Herbaspirillum rubrisubalbicans M1.","code":""},{"path":"/reference/batch_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BUSCO summary output for batch mode — batch_summary","text":"","code":"data(batch_summary)"},{"path":"/reference/batch_summary.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"BUSCO summary output for batch mode — batch_summary","text":"2-column data frame following variables: Class Factor BUSCO classes Frequency Numeric percentage BUSCOs class. Lineage Character lineage dataset used. File Character name FASTA file used.","code":""},{"path":"/reference/batch_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BUSCO summary output for batch mode — batch_summary","text":"","code":"data(batch_summary)"},{"path":"/reference/busco_is_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if BUSCO is installed — busco_is_installed","title":"Check if BUSCO is installed — busco_is_installed","text":"Check BUSCO installed","code":""},{"path":"/reference/busco_is_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if BUSCO is installed — busco_is_installed","text":"","code":"busco_is_installed()"},{"path":"/reference/busco_is_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if BUSCO is installed — busco_is_installed","text":"Logical indicating whether BUSCO installed .","code":""},{"path":"/reference/busco_is_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if BUSCO is installed — busco_is_installed","text":"","code":"busco_is_installed() #> [1] FALSE"},{"path":"/reference/calculate_H.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate homogeneity scores for orthogroups — calculate_H","title":"Calculate homogeneity scores for orthogroups — calculate_H","text":"Calculate homogeneity scores orthogroups","code":""},{"path":"/reference/calculate_H.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate homogeneity scores for orthogroups — calculate_H","text":"","code":"calculate_H(orthogroup_df, correct_overclustering = TRUE)"},{"path":"/reference/calculate_H.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate homogeneity scores for orthogroups — calculate_H","text":"orthogroup_df Data frame orthogroups associated genes annotation. columns Gene, Orthogroup, Annotation mandatory, must represent Gene ID, Orthogroup ID, Annotation ID (e.g., Interpro/PFAM), respectively. correct_overclustering Logical indicating whether correct overclustering orthogroups. Default: TRUE.","code":""},{"path":"/reference/calculate_H.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate homogeneity scores for orthogroups — calculate_H","text":"2-column data frame variables Orthogroup Score, corresponding orthogroup ID orthogroup score, respectively.","code":""},{"path":"/reference/calculate_H.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate homogeneity scores for orthogroups — calculate_H","text":"Homogeneity calculated based pairwise Sorensen-Dice similarity indices gene pairs orthogroup, range 0 1. Thus, genes orthogroup share domain, orthogroup homogeneity score 1. hand, genes orthogroup domain common, orthogroup homogeneity score 0. Additionally, users can correct overclustering penalizing protein domains appear multiple orthogroups (default).","code":""},{"path":"/reference/calculate_H.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate homogeneity scores for orthogroups — calculate_H","text":"","code":"data(og) data(interpro_ath) orthogroup_df <- merge(og[og$Species == \"Ath\", ], interpro_ath) # Filter data to reduce run time orthogroup_df <- orthogroup_df[1:10000, ] H <- calculate_H(orthogroup_df)"},{"path":"/reference/cogeqc-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cogeqc: Systematic quality checks on comparative genomics analyses — cogeqc-package","title":"cogeqc: Systematic quality checks on comparative genomics analyses — cogeqc-package","text":"cogeqc aims facilitate systematic quality checks standard comparative genomics analyses help researchers detect issues select suitable parameters data set. cogeqc can used asses: . genome assembly annotation quality BUSCOs comparisons statistics publicly available genomes NCBI; ii. orthogroup inference using protein domain-based approach ; iii. synteny detection using synteny network properties. also data visualization functions explore QC summary statistics.","code":""},{"path":[]},{"path":"/reference/cogeqc-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cogeqc: Systematic quality checks on comparative genomics analyses — cogeqc-package","text":"Maintainer: Fabrício Almeida-Silva fabricio_almeidasilva@hotmail.com (ORCID) Authors: Yves Van de Peer yves.vandepeer@psb.vib-ugent.(ORCID)","code":""},{"path":"/reference/compare_genome_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare user-defined assembly statistics with statistics of NCBI genomes — compare_genome_stats","title":"Compare user-defined assembly statistics with statistics of NCBI genomes — compare_genome_stats","text":"function helps users analyze genome assembly stats context comparing metrics obtained users \"reference\" metrics closely-related organisms.","code":""},{"path":"/reference/compare_genome_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare user-defined assembly statistics with statistics of NCBI genomes — compare_genome_stats","text":"","code":"compare_genome_stats(ncbi_stats = NULL, user_stats = NULL)"},{"path":"/reference/compare_genome_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare user-defined assembly statistics with statistics of NCBI genomes — compare_genome_stats","text":"ncbi_stats data frame summary statistics particular taxon obtained NCBI, obtained function get_genome_stats. user_stats data frame assembly statistics obtained user. column named accession mandatory, must contain unique identifiers genome(s) analyzed user. Dummy variables can used identifiers (e.g., \"my_genome_001\"), long unique. column containing assembly stats must names corresponding columns data frame specified ncbi_stats. instance, stats total number genes sequence length must columns named \"gene_count_total\" \"sequence_length\", ncbi_stats data frame.","code":""},{"path":"/reference/compare_genome_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare user-defined assembly statistics with statistics of NCBI genomes — compare_genome_stats","text":"data frame following variables: accession character, unique identifier user_stats$accession. variable character, name genome assembly metric (e.g., \"CC_ratio\"). percentile numeric, percentile distribution. rank numeric, rank distribution (highest lowest). variable \"CC_ratio\", ranks go lowest highest.","code":""},{"path":"/reference/compare_genome_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare user-defined assembly statistics with statistics of NCBI genomes — compare_genome_stats","text":"genome assembly statistic (e.g., \"gene_count_total\"), values user_stats compared distribution values ncbi_stats, percentile rank distributions reported.","code":""},{"path":"/reference/compare_genome_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare user-defined assembly statistics with statistics of NCBI genomes — compare_genome_stats","text":"","code":"# Use case: user assembled a maize (Zea mays) genome  ## Obtain stats for maize genomes on the NCBI ncbi_stats <- get_genome_stats(taxon = \"Zea mays\")  ## Create a data frame of stats for fictional maize genome user_stats <- data.frame(     accession = \"my_lovely_maize\",     sequence_length = 2.4 * 1e9,     gene_count_total = 50000,     CC_ratio = 1 )  # Compare stats compare_genome_stats(ncbi_stats, user_stats) #>         accession         variable percentile rank #> 1 my_lovely_maize  sequence_length 0.97894737  3.0 #> 2 my_lovely_maize gene_count_total 1.00000000  1.0 #> 3 my_lovely_maize         CC_ratio 0.02941176  1.5"},{"path":"/reference/compare_orthogroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare inferred orthogroups to a reference set — compare_orthogroups","title":"Compare inferred orthogroups to a reference set — compare_orthogroups","text":"Compare inferred orthogroups reference set","code":""},{"path":"/reference/compare_orthogroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare inferred orthogroups to a reference set — compare_orthogroups","text":"","code":"compare_orthogroups(ref_orthogroups = NULL, test_orthogroups = NULL)"},{"path":"/reference/compare_orthogroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare inferred orthogroups to a reference set — compare_orthogroups","text":"ref_orthogroups Reference orthogroups 3-column data frame columns Orthogroup, Species, Gene. data frame can created 'Orthogroups.tsv' file generated OrthoFinder function read_orthogroups(). test_orthogroups Test orthogroups compared ref_orthogroups 3-column data frame format.","code":""},{"path":"/reference/compare_orthogroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare inferred orthogroups to a reference set — compare_orthogroups","text":"2-column data frame following variables: Orthogroup Character orthogroup IDs. Preserved logical vector preservation status. TRUE orthogroup reference set fully preserved test set, FALSE otherwise.","code":""},{"path":"/reference/compare_orthogroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare inferred orthogroups to a reference set — compare_orthogroups","text":"function compares test set orthogroups reference set returns orthogroups reference set fully preserved test set (.e., identical gene repertoire) . Species names (column 2) must reference test set. species shared reference test sets, considered comparison.","code":""},{"path":"/reference/compare_orthogroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare inferred orthogroups to a reference set — compare_orthogroups","text":"","code":"set.seed(123) data(og) og <- og[1:5000, ] ref <- og # Shuffle genes to simulate a different set test <- data.frame(     Orthogroup = sample(og$Orthogroup, nrow(og), replace = FALSE),     Species = og$Species,     Gene = og$Gene ) comparison <- compare_orthogroups(ref, test)  # Calculating percentage of preservation sum(comparison$Preserved) / length(comparison$Preserved) #> [1] 0"},{"path":"/reference/fit_sft.html","id":null,"dir":"Reference","previous_headings":"","what":"Goodness of fit test for the scale-free topology model — fit_sft","title":"Goodness of fit test for the scale-free topology model — fit_sft","text":"Goodness fit test scale-free topology model","code":""},{"path":"/reference/fit_sft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Goodness of fit test for the scale-free topology model — fit_sft","text":"","code":"fit_sft(edges)"},{"path":"/reference/fit_sft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Goodness of fit test for the scale-free topology model — fit_sft","text":"edges 2-column data frame network edges represented . Columns 1 2 represent nodes 1 2 edge.","code":""},{"path":"/reference/fit_sft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Goodness of fit test for the scale-free topology model — fit_sft","text":"numeric scalar R squared scale-free topology fit.","code":""},{"path":"/reference/fit_sft.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Goodness of fit test for the scale-free topology model — fit_sft","text":"","code":"data(synnet) edges <- synnet fit_sft(edges) #> [1] 0.6806854"},{"path":"/reference/get_genome_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get summary statistics for genomes on NCBI using the NCBI Datasets API — get_genome_stats","title":"Get summary statistics for genomes on NCBI using the NCBI Datasets API — get_genome_stats","text":"Get summary statistics genomes NCBI using NCBI Datasets API","code":""},{"path":"/reference/get_genome_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get summary statistics for genomes on NCBI using the NCBI Datasets API — get_genome_stats","text":"","code":"get_genome_stats(taxon = NULL, filters = NULL)"},{"path":"/reference/get_genome_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get summary statistics for genomes on NCBI using the NCBI Datasets API — get_genome_stats","text":"taxon Taxon summary statistics retrieved, either character scalar (e.g., \"brassicaceae\") numeric scalar representing NCBI Taxonomy ID (e.g., 3700). filters (optional) list filters use querying API form key-value pairs, keys list names values list elements (e.g., list(filters.reference_only = \"true\"), see examples details).","code":""},{"path":"/reference/get_genome_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get summary statistics for genomes on NCBI using the NCBI Datasets API — get_genome_stats","text":"data frame following variables: accession character, accession number. source character, data source. species_taxid numeric, NCBI Taxonomy ID. species_name character, species' scientific name. species_common_name character, species' common name. species_ecotype character, species' ecotype. species_strain character, species' strain. species_isolate character, species' isolate. species_cultivar character, species' cultivar. assembly_level factor, assembly level (\"Complete\", \"Chromosome\", \"Scaffold\", \"Contig\"). assembly_status character, assembly status. assembly_name character, assembly name. assembly_type character, assembly type. submission_date character, submission date (YYYY-MM-DD). submitter character, submitter name. sequencing_technology character, sequencing technology. atypical logical, indicator wheter genome atypical. refseq_category character, RefSeq category. chromosome_count numeric, number chromosomes. sequence_length numeric, total sequence length. ungapped_length numeric, ungapped sequence length. contig_count numeric, number contigs. contig_N50 numeric, contig N50. contig_L50 numeric, contig L50. scaffold_N50 numeric, contig N50. scaffold_L50 numeric, contig L50. GC_percent numeric, GC percentage (0-100). annotation_provider character, name annotation provider. annotation_release_date character, annotation release date (YYYY-MM-DD). gene_count_total numeric, total number genes. gene_count_coding numeric, number protein-coding genes. gene_count_noncoding numeric, number non-coding genes. gene_count_pseudogene numeric, number pseudogenes. gene_count_other numeric, number genes. CC_ratio numeric, ratio number contigs number chromosomes.","code":""},{"path":"/reference/get_genome_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get summary statistics for genomes on NCBI using the NCBI Datasets API — get_genome_stats","text":"Possible filters filters parameter can accessed https://www.ncbi.nlm.nih.gov/datasets/docs/v2/reference-docs/rest-api/#get-/genome/taxon/-taxons-/dataset_report.","code":""},{"path":"/reference/get_genome_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get summary statistics for genomes on NCBI using the NCBI Datasets API — get_genome_stats","text":"","code":"# Example 1: Search for A. thaliana genomes by tax ID ex1 <- get_genome_stats(taxon = 3702)  # Example 2: Search for A. thaliana genomes by name ex2 <- get_genome_stats(taxon = \"Arabidopsis thaliana\")  # Example 3: Search for chromosome-level Brassicaeae genomes ex3 <- get_genome_stats(     taxon = \"brassicaceae\",     filters = list(filters.assembly_level = \"chromosome\") )"},{"path":"/reference/interpro_ath.html","id":null,"dir":"Reference","previous_headings":"","what":"Intepro annotation for Arabidopsis thaliana's genes — interpro_ath","title":"Intepro annotation for Arabidopsis thaliana's genes — interpro_ath","text":"annotation data retrieved PLAZA Dicots 5.0.","code":""},{"path":"/reference/interpro_ath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intepro annotation for Arabidopsis thaliana's genes — interpro_ath","text":"","code":"data(interpro_ath)"},{"path":"/reference/interpro_ath.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Intepro annotation for Arabidopsis thaliana's genes — interpro_ath","text":"2-column data frame: Gene Character gene IDs. Annotation Character Interpro domains.","code":""},{"path":"/reference/interpro_ath.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Intepro annotation for Arabidopsis thaliana's genes — interpro_ath","text":"Van Bel, M., Silvestri, F., Weitz, E. M., Kreft, L., Botzki, ., Coppens, F., & Vandepoele, K. (2021). PLAZA 5.0: extending scope power comparative functional genomics plants. Nucleic acids research.","code":""},{"path":"/reference/interpro_ath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intepro annotation for Arabidopsis thaliana's genes — interpro_ath","text":"","code":"data(interpro_ath)"},{"path":"/reference/interpro_bol.html","id":null,"dir":"Reference","previous_headings":"","what":"Intepro annotation for Brassica oleraceae's genes — interpro_bol","title":"Intepro annotation for Brassica oleraceae's genes — interpro_bol","text":"annotation data retrieved PLAZA Dicots 5.0.","code":""},{"path":"/reference/interpro_bol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intepro annotation for Brassica oleraceae's genes — interpro_bol","text":"","code":"data(interpro_bol)"},{"path":"/reference/interpro_bol.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Intepro annotation for Brassica oleraceae's genes — interpro_bol","text":"2-column data frame: Gene Character gene IDs. Annotation Character Interpro domains.","code":""},{"path":"/reference/interpro_bol.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Intepro annotation for Brassica oleraceae's genes — interpro_bol","text":"Van Bel, M., Silvestri, F., Weitz, E. M., Kreft, L., Botzki, ., Coppens, F., & Vandepoele, K. (2021). PLAZA 5.0: extending scope power comparative functional genomics plants. Nucleic acids research.","code":""},{"path":"/reference/interpro_bol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intepro annotation for Brassica oleraceae's genes — interpro_bol","text":"","code":"data(interpro_bol)"},{"path":"/reference/list_busco_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"List BUSCO data sets — list_busco_datasets","title":"List BUSCO data sets — list_busco_datasets","text":"List BUSCO data sets","code":""},{"path":"/reference/list_busco_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List BUSCO data sets — list_busco_datasets","text":"","code":"list_busco_datasets()"},{"path":"/reference/list_busco_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List BUSCO data sets — list_busco_datasets","text":"hierarchically organized list available data sets returned busco --list-datasets.","code":""},{"path":"/reference/list_busco_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List BUSCO data sets — list_busco_datasets","text":"","code":"if(busco_is_installed()) {     list_busco_datasets() }"},{"path":"/reference/og.html","id":null,"dir":"Reference","previous_headings":"","what":"Orthogroups between Arabidopsis thaliana and Brassica oleraceae — og","title":"Orthogroups between Arabidopsis thaliana and Brassica oleraceae — og","text":"Data obtained PLAZA Dicots 5.0.","code":""},{"path":"/reference/og.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orthogroups between Arabidopsis thaliana and Brassica oleraceae — og","text":"","code":"data(og)"},{"path":"/reference/og.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Orthogroups between Arabidopsis thaliana and Brassica oleraceae — og","text":"3-column data frame following variables: Orthogroup Orthogroup ID. Species Abbreviation species' name. Gene Gene ID","code":""},{"path":"/reference/og.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Orthogroups between Arabidopsis thaliana and Brassica oleraceae — og","text":"Van Bel, M., Silvestri, F., Weitz, E. M., Kreft, L., Botzki, ., Coppens, F., & Vandepoele, K. (2021). PLAZA 5.0: extending scope power comparative functional genomics plants. Nucleic acids research.","code":""},{"path":"/reference/og.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orthogroups between Arabidopsis thaliana and Brassica oleraceae — og","text":"","code":"data(og)"},{"path":"/reference/plot_busco.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot BUSCO summary output — plot_busco","title":"Plot BUSCO summary output — plot_busco","text":"Plot BUSCO summary output","code":""},{"path":"/reference/plot_busco.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot BUSCO summary output — plot_busco","text":"","code":"plot_busco(summary_df = NULL)"},{"path":"/reference/plot_busco.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot BUSCO summary output — plot_busco","text":"summary_df Data frame BUSCO summary output returned read_busco().","code":""},{"path":"/reference/plot_busco.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot BUSCO summary output — plot_busco","text":"ggplot object barplot BUSCOs class.","code":""},{"path":"/reference/plot_busco.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot BUSCO summary output — plot_busco","text":"","code":"# Single file result_dir <- system.file(\"extdata\", package = \"cogeqc\") summary_df <- read_busco(result_dir) # Batch mode data(batch_summary) plot_busco(summary_df)  plot_busco(batch_summary)"},{"path":"/reference/plot_duplications.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot species-specific duplications — plot_duplications","title":"Plot species-specific duplications — plot_duplications","text":"Plot species-specific duplications","code":""},{"path":"/reference/plot_duplications.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot species-specific duplications — plot_duplications","text":"","code":"plot_duplications(stats_list = NULL)"},{"path":"/reference/plot_duplications.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot species-specific duplications — plot_duplications","text":"stats_list list data frames Orthofinder summary stats returned function read_orthofinder_stats.","code":""},{"path":"/reference/plot_duplications.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot species-specific duplications — plot_duplications","text":"ggplot object barplot number species-specific duplications.","code":""},{"path":"/reference/plot_duplications.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot species-specific duplications — plot_duplications","text":"","code":"dir <- system.file(\"extdata\", package = \"cogeqc\") stats_list <- read_orthofinder_stats(dir) plot_duplications(stats_list)"},{"path":"/reference/plot_genes_in_ogs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot percentage of genes in orthogroups for each species — plot_genes_in_ogs","title":"Plot percentage of genes in orthogroups for each species — plot_genes_in_ogs","text":"Plot percentage genes orthogroups species","code":""},{"path":"/reference/plot_genes_in_ogs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot percentage of genes in orthogroups for each species — plot_genes_in_ogs","text":"","code":"plot_genes_in_ogs(stats_list = NULL)"},{"path":"/reference/plot_genes_in_ogs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot percentage of genes in orthogroups for each species — plot_genes_in_ogs","text":"stats_list list data frames Orthofinder summary stats returned function read_orthofinder_stats.","code":""},{"path":"/reference/plot_genes_in_ogs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot percentage of genes in orthogroups for each species — plot_genes_in_ogs","text":"ggplot object barplot percentages genes orthogroups species.","code":""},{"path":"/reference/plot_genes_in_ogs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot percentage of genes in orthogroups for each species — plot_genes_in_ogs","text":"","code":"dir <- system.file(\"extdata\", package = \"cogeqc\") stats_list <- read_orthofinder_stats(dir) plot_genes_in_ogs(stats_list)"},{"path":"/reference/plot_genome_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot statistics on genome assemblies on the NCBI — plot_genome_stats","title":"Plot statistics on genome assemblies on the NCBI — plot_genome_stats","text":"Plot statistics genome assemblies NCBI","code":""},{"path":"/reference/plot_genome_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot statistics on genome assemblies on the NCBI — plot_genome_stats","text":"","code":"plot_genome_stats(ncbi_stats = NULL, user_stats = NULL)"},{"path":"/reference/plot_genome_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot statistics on genome assemblies on the NCBI — plot_genome_stats","text":"ncbi_stats data frame summary statistics particular taxon obtained NCBI, obtained function get_genome_stats. user_stats (Optional) data frame assembly statistics obtained user. Statistics data frame highlighted red data frame passed. column named accession mandatory, must contain unique identifiers genome(s) analyzed user. Dummy variables can used identifiers (e.g., \"my_genome_001\"), long unique. column containing assembly stats must names corresponding columns data frame specified ncbi_stats. instance, stats total number genes sequence length must columns named \"gene_count_total\" \"sequence_length\", ncbi_stats data frame.","code":""},{"path":"/reference/plot_genome_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot statistics on genome assemblies on the NCBI — plot_genome_stats","text":"composition ggplot objects made patchwork.","code":""},{"path":"/reference/plot_genome_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot statistics on genome assemblies on the NCBI — plot_genome_stats","text":"","code":"# Example 1: plot stats on maize genomes on the NCBI ## Obtain stats for maize genomes on the NCBI ncbi_stats <- get_genome_stats(taxon = \"Zea mays\")  plot_genome_stats(ncbi_stats)   ## Plot stats # Example 2: highlight user-defined stats in the distribution ## Create a data frame of stats for fictional maize genome user_stats <- data.frame(     accession = \"my_lovely_maize\",     sequence_length = 2.4 * 1e9,     gene_count_total = 50000,     CC_ratio = 1 )  plot_genome_stats(ncbi_stats, user_stats)"},{"path":"/reference/plot_og_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot pairwise orthogroup overlap between species — plot_og_overlap","title":"Plot pairwise orthogroup overlap between species — plot_og_overlap","text":"Plot pairwise orthogroup overlap species","code":""},{"path":"/reference/plot_og_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot pairwise orthogroup overlap between species — plot_og_overlap","text":"","code":"plot_og_overlap(stats_list = NULL, clust = TRUE)"},{"path":"/reference/plot_og_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot pairwise orthogroup overlap between species — plot_og_overlap","text":"stats_list list data frames Orthofinder summary stats returned function read_orthofinder_stats. clust Logical indicating whether clust data based overlap. Default: TRUE","code":""},{"path":"/reference/plot_og_overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot pairwise orthogroup overlap between species — plot_og_overlap","text":"ggplot object heatmap.","code":""},{"path":"/reference/plot_og_overlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot pairwise orthogroup overlap between species — plot_og_overlap","text":"","code":"dir <- system.file(\"extdata\", package = \"cogeqc\") stats_list <- read_orthofinder_stats(dir) plot_og_overlap(stats_list)"},{"path":"/reference/plot_og_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot orthogroup sizes per species — plot_og_sizes","title":"Plot orthogroup sizes per species — plot_og_sizes","text":"Plot orthogroup sizes per species","code":""},{"path":"/reference/plot_og_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot orthogroup sizes per species — plot_og_sizes","text":"","code":"plot_og_sizes(orthogroups = NULL, log = FALSE, max_size = NULL)"},{"path":"/reference/plot_og_sizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot orthogroup sizes per species — plot_og_sizes","text":"orthogroups 3-column data frame columns Orthogroup, Species, Gene. data frame can created 'Orthogroups.tsv' file generated OrthoFinder function read_orthogroups(). log Logical indicating whether transform orthogroups sizes natural logarithms. Default: FALSE. max_size Numeric indicating maximum orthogroup size consider. parameter NULL, orthogroups larger max_size (e.g., 100) considered. Default: NULL.","code":""},{"path":"/reference/plot_og_sizes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot orthogroup sizes per species — plot_og_sizes","text":"ggplot object violin plot.","code":""},{"path":"/reference/plot_og_sizes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot orthogroup sizes per species — plot_og_sizes","text":"","code":"data(og) plot_og_sizes(og, log = TRUE)  plot_og_sizes(og, max_size = 100)  plot_og_sizes(og, log = TRUE, max_size = 100)"},{"path":"/reference/plot_orthofinder_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a panel with a summary of Orthofinder stats — plot_orthofinder_stats","title":"Plot a panel with a summary of Orthofinder stats — plot_orthofinder_stats","text":"function wrapper plot_species_tree, plot_duplications, plot_genes_in_ogs, plot_species_specific_ogs.","code":""},{"path":"/reference/plot_orthofinder_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a panel with a summary of Orthofinder stats — plot_orthofinder_stats","text":"","code":"plot_orthofinder_stats(tree = NULL, stats_list = NULL, xlim = c(0, 1))"},{"path":"/reference/plot_orthofinder_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a panel with a summary of Orthofinder stats — plot_orthofinder_stats","text":"tree Tree object returned treeio::read.*, family functions treeio package import tree files multiple formats, Newick, Phylip, NEXUS, others. species tree inferred Orthofinder (using STAG), tree file located Species_Tree/SpeciesTree_rooted_node_labels.txt. , can imported treeio::read_tree(path_to_file). stats_list (optional) list data frames Orthofinder summary stats returned function read_orthofinder_stats. list given input, nodes labeled number duplications. xlim Numeric vector x-axis limits. useful node tip labels visible due margin issues. Default: c(0, 1).","code":""},{"path":"/reference/plot_orthofinder_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a panel with a summary of Orthofinder stats — plot_orthofinder_stats","text":"panel ggplot objects.","code":""},{"path":"/reference/plot_orthofinder_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a panel with a summary of Orthofinder stats — plot_orthofinder_stats","text":"","code":"data(tree) dir <- system.file(\"extdata\", package = \"cogeqc\") stats_list <- read_orthofinder_stats(dir) plot_orthofinder_stats(tree, xlim = c(0, 1.5), stats_list = stats_list)"},{"path":"/reference/plot_species_specific_ogs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot number of species-specific orthogroups — plot_species_specific_ogs","title":"Plot number of species-specific orthogroups — plot_species_specific_ogs","text":"Plot number species-specific orthogroups","code":""},{"path":"/reference/plot_species_specific_ogs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot number of species-specific orthogroups — plot_species_specific_ogs","text":"","code":"plot_species_specific_ogs(stats_list = NULL)"},{"path":"/reference/plot_species_specific_ogs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot number of species-specific orthogroups — plot_species_specific_ogs","text":"stats_list list data frames Orthofinder summary stats returned function read_orthofinder_stats.","code":""},{"path":"/reference/plot_species_specific_ogs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot number of species-specific orthogroups — plot_species_specific_ogs","text":"ggplot object barplot number species-specific orthogroups species.","code":""},{"path":"/reference/plot_species_specific_ogs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot number of species-specific orthogroups — plot_species_specific_ogs","text":"","code":"dir <- system.file(\"extdata\", package = \"cogeqc\") stats_list <- read_orthofinder_stats(dir) plot_species_specific_ogs(stats_list)"},{"path":"/reference/plot_species_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot species tree — plot_species_tree","title":"Plot species tree — plot_species_tree","text":"Plot species tree","code":""},{"path":"/reference/plot_species_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot species tree — plot_species_tree","text":"","code":"plot_species_tree(tree = NULL, xlim = c(0, 1), stats_list = NULL)"},{"path":"/reference/plot_species_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot species tree — plot_species_tree","text":"tree Tree object returned treeio::read.*, family functions treeio package import tree files multiple formats, Newick, Phylip, NEXUS, others. species tree inferred Orthofinder (using STAG), tree file located Species_Tree/SpeciesTree_rooted_node_labels.txt. , can imported treeio::read_tree(path_to_file). xlim Numeric vector x-axis limits. useful node tip labels visible due margin issues. Default: c(0, 1). stats_list (optional) list data frames Orthofinder summary stats returned function read_orthofinder_stats. list given input, nodes labeled number duplications.","code":""},{"path":"/reference/plot_species_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot species tree — plot_species_tree","text":"ggtree/ggplot object species tree.","code":""},{"path":"/reference/plot_species_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot species tree — plot_species_tree","text":"","code":"data(tree) plot_species_tree(tree)"},{"path":"/reference/read_busco.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and parse BUSCO's summary report — read_busco","title":"Read and parse BUSCO's summary report — read_busco","text":"Read parse BUSCO's summary report","code":""},{"path":"/reference/read_busco.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and parse BUSCO's summary report — read_busco","text":"","code":"read_busco(result_dir = NULL)"},{"path":"/reference/read_busco.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and parse BUSCO's summary report — read_busco","text":"result_dir Path directory BUSCO results stored. function look short_summary* file (single run) short_summary* file (batch mode).","code":""},{"path":"/reference/read_busco.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and parse BUSCO's summary report — read_busco","text":"data frame following variables: Class BUSCO class. One Complete_SC, Complete_duplicate, Fragmented, Missing Frequency Frequency BUSCOs class. BUSCO run batch mode, variable contain relative frequencies. BUSCO run single file, contain absolute frequencies. Lineage Name lineage dataset used. File (batch mode ) Name input FASTA file.","code":""},{"path":"/reference/read_busco.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and parse BUSCO's summary report — read_busco","text":"","code":"result_dir <- system.file(\"extdata\", package = \"cogeqc\") df <- read_busco(result_dir)"},{"path":"/reference/read_orthofinder_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and parse Orthofinder summary statistics — read_orthofinder_stats","title":"Read and parse Orthofinder summary statistics — read_orthofinder_stats","text":"Read parse Orthofinder summary statistics","code":""},{"path":"/reference/read_orthofinder_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and parse Orthofinder summary statistics — read_orthofinder_stats","text":"","code":"read_orthofinder_stats(stats_dir = NULL)"},{"path":"/reference/read_orthofinder_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and parse Orthofinder summary statistics — read_orthofinder_stats","text":"stats_dir Path directory containing Orthofinder's comparative genomics statistics. Orthofinder results directory, directory named Comparative_Genomics_Statistics.","code":""},{"path":"/reference/read_orthofinder_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and parse Orthofinder summary statistics — read_orthofinder_stats","text":"list data frames following elements: stats data frame summary stats per species following variables: Species Factor species names. N_genes Numeric number genes. N_genes_in_OGs Numeric number genes orthogroups. Perc_genes_in_OGs Numeric percentage genes orthogroups. N_ssOGs Numeric number species-specific orthogroups. N_genes_in_ssOGs Numeric number genes species-specific orthogroups. Perc_genes_in_ssOGs Numeric percentage genes species-specific orthogroups. Dups Integer number duplications per species. og_overlap symmetric data frame pairwise orthogroup overlap species. duplications 2-column data frame node IDs first column number gene duplications (50% support) second column.","code":""},{"path":"/reference/read_orthofinder_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and parse Orthofinder summary statistics — read_orthofinder_stats","text":"","code":"stats_dir <- system.file(\"extdata\", package = \"cogeqc\") ortho_stats <- read_orthofinder_stats(stats_dir)"},{"path":"/reference/read_orthogroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and parse orthogroups file created by OrthoFinder — read_orthogroups","title":"Read and parse orthogroups file created by OrthoFinder — read_orthogroups","text":"function converts orthogroups file named Orthogroups.tsv parsed data frame.","code":""},{"path":"/reference/read_orthogroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and parse orthogroups file created by OrthoFinder — read_orthogroups","text":"","code":"read_orthogroups(orthogroups_path = NULL)"},{"path":"/reference/read_orthogroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and parse orthogroups file created by OrthoFinder — read_orthogroups","text":"orthogroups_path Path Orthogroups/Orthogroups.tsv file generated OrthoFinder.","code":""},{"path":"/reference/read_orthogroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and parse orthogroups file created by OrthoFinder — read_orthogroups","text":"3-column data frame orthogroups, species IDs gene IDs, respectively.","code":""},{"path":"/reference/read_orthogroups.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read and parse orthogroups file created by OrthoFinder — read_orthogroups","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/read_orthogroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and parse orthogroups file created by OrthoFinder — read_orthogroups","text":"","code":"path <- system.file(\"extdata\", \"Orthogroups.tsv.gz\", package = \"cogeqc\") og <- read_orthogroups(path)"},{"path":"/reference/run_busco.html","id":null,"dir":"Reference","previous_headings":"","what":"Run BUSCO assessment of assembly and annotation quality — run_busco","title":"Run BUSCO assessment of assembly and annotation quality — run_busco","text":"Run BUSCO assessment assembly annotation quality","code":""},{"path":"/reference/run_busco.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run BUSCO assessment of assembly and annotation quality — run_busco","text":"","code":"run_busco(   sequence = NULL,   outlabel = NULL,   mode = c(\"genome\", \"transcriptome\", \"proteins\"),   lineage = NULL,   auto_lineage = NULL,   force = FALSE,   threads = 1,   outpath = NULL,   download_path = tempdir() )"},{"path":"/reference/run_busco.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run BUSCO assessment of assembly and annotation quality — run_busco","text":"sequence object class DNAStringSet/AAStringSet/RNAStringSet path FASTA file genome, transcriptome, protein sequences analyzed. many FASTA files directory, can input path directory, BUSCO run FASTA files inside . outlabel Character recognizable short label analysis directory files. mode Character BUSCO mode. One 'genome', 'transcriptome', 'proteins'. lineage Character name lineage used. auto_lineage Character indicating whether BUSCO determine optimum lineage path automatically. One 'euk', 'prok', '', NULL. 'euk', determine optimum lineage path eukaryote tree. 'prok', determine optimum lineage path non-eukaryote trees. '', determine optimum lineage path trees. NULL, automatically determine lineage, lineage must manually specified. Default: NULL. force Logical indicating whether existing runs file names overwritten. Default: FALSE. threads Numeric number threads/cores use. Default: 1. outpath Path results directory. NULL, results stored current working directory. Default: NULL. download_path Path directory BUSCO datasets stored downloading. Default: tempdir().","code":""},{"path":"/reference/run_busco.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run BUSCO assessment of assembly and annotation quality — run_busco","text":"character vector names subdirectories files results directory.","code":""},{"path":"/reference/run_busco.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run BUSCO assessment of assembly and annotation quality — run_busco","text":"","code":"# \\donttest{ sequence <- system.file(\"extdata\", \"Hse_subset.fa\", package = \"cogeqc\") download_path <- paste0(tempdir(), \"/datasets\") if(busco_is_installed()) {     run_busco(sequence, outlabel = \"Hse\", mode = \"genome\",               lineage = \"burkholderiales_odb10\",               outpath = tempdir(), download_path = download_path) } # }"},{"path":"/reference/synnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Synteny network for Brassica oleraceae, B. napus, and B. rapa — synnet","title":"Synteny network for Brassica oleraceae, B. napus, and B. rapa — synnet","text":"Synteny network Brassica oleraceae, B. napus, B. rapa","code":""},{"path":"/reference/synnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synteny network for Brassica oleraceae, B. napus, and B. rapa — synnet","text":"","code":"data(synnet)"},{"path":"/reference/synnet.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synteny network for Brassica oleraceae, B. napus, and B. rapa — synnet","text":"2-column data frame variables anchor1 anchor2, containing names loci anchor 1 anchor 2, respectively.","code":""},{"path":"/reference/synnet.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Synteny network for Brassica oleraceae, B. napus, and B. rapa — synnet","text":"Zhao, T., & Schranz, M. E. (2019). Network-based microsynteny analysis identifies major differences genomic outliers mammalian angiosperm genomes. Proceedings National Academy Sciences, 116(6), 2165-2174.","code":""},{"path":"/reference/synnet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synteny network for Brassica oleraceae, B. napus, and B. rapa — synnet","text":"","code":"data(synnet)"},{"path":"/reference/tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Species tree for model species — tree","title":"Species tree for model species — tree","text":"data used create object retrieved Orthofinder's example output model species, available https://bioinformatics.plants.ox.ac.uk/davidemms/public_data/.","code":""},{"path":"/reference/tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species tree for model species — tree","text":"","code":"data(tree)"},{"path":"/reference/tree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Species tree for model species — tree","text":"object class \"phylo\" returned treeio::read.tree().","code":""},{"path":"/reference/tree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Species tree for model species — tree","text":"Emms, D. M., & Kelly, S. (2019). OrthoFinder: phylogenetic orthology inference comparative genomics. Genome biology, 20(1), 1-14.","code":""},{"path":"/reference/tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Species tree for model species — tree","text":"","code":"data(tree)"},{"path":"/news/index.html","id":"cogeqc-0990","dir":"Changelog","previous_headings":"","what":"cogeqc 0.99.0","title":"cogeqc 0.99.0","text":"NEW FEATURES Added NEWS.md file track changes package.","code":""},{"path":"/news/index.html","id":"cogeqc-113","dir":"Changelog","previous_headings":"","what":"cogeqc 1.1.3","title":"cogeqc 1.1.3","text":"NEW FEATURES Added correction overclustering calculate_H() penalizes protein domains multiple orthogroups. Updated vignette provide detailed explanation homogeneity scores calculated.","code":""},{"path":"/news/index.html","id":"cogeqc-114","dir":"Changelog","previous_headings":"","what":"cogeqc 1.1.4","title":"cogeqc 1.1.4","text":"NEW FEATURES Added option scale scores maximum value","code":""},{"path":"/news/index.html","id":"cogeqc-117","dir":"Changelog","previous_headings":"","what":"cogeqc 1.1.7","title":"cogeqc 1.1.7","text":"BUG FIXES Variable Duplications_50 duplications data frame matching variable Dups stats data frame output read_orthofinder_stats() NEW FEATURES Replaced dispersal formula meaningful interpretable one. Added max_size param plot_og_sizes() ignore OGs larger specific size.","code":""},{"path":"/news/index.html","id":"cogeqc-118","dir":"Changelog","previous_headings":"","what":"cogeqc 1.1.8","title":"cogeqc 1.1.8","text":"CHANGES Synteny assessment formula now also considers scale-free topology fit. BUG FIXES Reference-based orthogroup inference require exact set species anymore.","code":""},{"path":"/news/index.html","id":"cogeqc-131","dir":"Changelog","previous_headings":"","what":"cogeqc 1.3.1","title":"cogeqc 1.3.1","text":"CHANGES Added functions explore assembly annotation statistics context: assembly annotation stats NCBI genomes can extracted Datasets API compared user-defined values. New functions: get_genome_stats(), compare_genome_stats(), plot_genome_stats().","code":""}]
